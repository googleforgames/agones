# Copyright 2019 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $useLoadBalancerIP := and (ne .Values.agones.allocator.http.loadBalancerIP "") (eq .Values.agones.allocator.http.serviceType "LoadBalancer") }}
{{- if .Values.agones.allocator.install }}
# Define a Service for the agones-allocator
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Values.agones.serviceaccount.allocator.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: allocator
    app: {{ template "agones.name" . }}
    chart: {{ template "agones.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- if .Values.agones.allocator.http.annotations }}
  annotations:
{{ toYaml .Values.agones.allocator.http.annotations | indent 4 }}
{{- end }}
spec:
  selector:
    multicluster.agones.dev/role: allocator
  ports:
    - port: {{ .Values.agones.allocator.http.port }}
      name: https
      targetPort: 8443
      protocol: TCP
  type: {{ .Values.agones.allocator.http.serviceType }}
{{- if $useLoadBalancerIP }}
  loadBalancerIP: {{ .Values.agones.allocator.http.loadBalancerIP }}
{{- end }}
{{- if eq .Values.agones.allocator.http.serviceType "LoadBalancer" }}
  {{- if .Values.agones.allocator.http.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
{{ toYaml .Values.agones.allocator.http.loadBalancerSourceRanges | indent 4 }}
  {{- end }}
{{- end }}

---
# Deploy a pod to run the agones-allocator code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agones-allocator
  namespace: {{ .Release.Namespace }}
  labels:
    multicluster.agones.dev/role: allocator
    app: {{ template "agones.name" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.agones.allocator.replicas }}
  selector:
    matchLabels:
      multicluster.agones.dev/role: allocator
      app: {{ template "agones.name" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  template:
    metadata:
      labels:
        multicluster.agones.dev/role: allocator
        app: {{ template "agones.name" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
{{- if .Values.agones.allocator.generateTLS }}
        revision/tls-cert: {{ .Release.Revision | quote }}
{{- end }}
{{- if and (.Values.agones.metrics.prometheusServiceDiscovery) (.Values.agones.metrics.prometheusEnabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
{{- end }}
{{- if .Values.agones.allocator.annotations }}
{{- toYaml .Values.agones.allocator.annotations | nindent 8 }}
{{- end }}
    spec:
      {{- if .Values.agones.allocator.affinity }}
      affinity:
{{ toYaml .Values.agones.allocator.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.agones.allocator.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.agones.allocator.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.agones.allocator.tolerations }}
      tolerations:
{{ toYaml .Values.agones.allocator.tolerations | indent 8 }}
      {{- end }}
      serviceAccountName: {{ $.Values.agones.serviceaccount.allocator.name }}
      volumes:
      - name: tls
        secret:
          secretName: allocator-tls
      - name: client-ca
        secret:
          secretName: allocator-client-ca
      containers:
      - name: agones-allocator
        image: "{{ .Values.agones.image.registry }}/{{ .Values.agones.image.allocator.name}}:{{ default .Values.agones.image.tag .Values.agones.image.allocator.tag }}"
        imagePullPolicy: {{ .Values.agones.image.controller.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          initialDelaySeconds: {{ .Values.agones.allocator.healthCheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.agones.allocator.healthCheck.periodSeconds }}
          failureThreshold: {{ .Values.agones.allocator.healthCheck.failureThreshold }}
          timeoutSeconds: {{ .Values.agones.allocator.healthCheck.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
        env:
        - name: API_SERVER_QPS
          value: {{ .Values.agones.allocator.apiServerQPS | quote }}
        - name: API_SERVER_QPS_BURST
          value: {{ .Values.agones.allocator.apiServerQPSBurst | quote }}
        - name: PROMETHEUS_EXPORTER
          value: {{ .Values.agones.metrics.prometheusEnabled | quote }}
        - name: STACKDRIVER_EXPORTER
          value: {{ .Values.agones.metrics.stackdriverEnabled | quote }}
        - name: GCP_PROJECT_ID
          value: {{ .Values.agones.metrics.stackdriverProjectID | quote }}
        - name: STACKDRIVER_LABELS
          value: {{ .Values.agones.metrics.stackdriverLabels | quote }}
        - name: DISABLE_MTLS
          value: {{ .Values.agones.allocator.disableMTLS | quote }}
        - name: DISABLE_TLS
          value: {{ .Values.agones.allocator.disableTLS | quote }}
        - name: REMOTE_ALLOCATION_TIMEOUT
          value: {{ .Values.agones.allocator.remoteAllocationTimeout | quote }}
        - name: TOTAL_REMOTE_ALLOCATION_TIMEOUT
          value: {{ .Values.agones.allocator.totalRemoteAllocationTimeout | quote }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONTAINER_NAME
          value: "agones-allocator"
        - name: LOG_LEVEL
          value: {{ .Values.agones.allocator.logLevel | quote }}
        - name: FEATURE_GATES
          value: {{ .Values.agones.featureGates | quote }}
        ports:
        - name: https
          containerPort: 8443
        volumeMounts:
        - mountPath: /home/allocator/tls
          name: tls
          readOnly: true
        - mountPath: /home/allocator/client-ca
          name: client-ca
          readOnly: true
{{- if .Values.agones.allocator.resources }}
        resources:
{{ toYaml .Values.agones.allocator.resources | indent 10 }}
{{- end }}
{{- if .Values.agones.image.controller.pullSecret }}
      imagePullSecrets:
        - name: {{.Values.agones.image.controller.pullSecret}}
{{- end }}

---
# Create a ClusterRole in that grants access to the agones allocation api
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agones-allocator
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" $ }}
    chart: {{ template "agones.chart" $ }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["allocation.agones.dev"]
  resources: ["gameserverallocations"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["nodes", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["agones.dev"]
  resources: ["gameservers", "gameserversets"]
  verbs: ["get", "list", "update", "watch"]
- apiGroups: ["agones.dev"]
  resources: ["gameservers"]
  verbs: ["patch"]
- apiGroups: ["multicluster.agones.dev"]
  resources: ["gameserverallocationpolicies"]
  verbs: ["get", "list", "watch"]

---
# Create a ServiceAccount that will be bound to the above role
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agones-allocator
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" $ }}
    chart: {{ template "agones.chart" $ }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
{{- if .Values.agones.serviceaccount.allocator.annotations }}
  annotations:
{{- toYaml .Values.agones.serviceaccount.allocator.annotations | nindent 4 }}
{{- end }}
---
# Bind the agones-allocator ServiceAccount to the agones-allocator ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agones-allocator
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" $ }}
    chart: {{ template "agones.chart" $ }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
subjects:
- kind: ServiceAccount
  name: {{ $.Values.agones.serviceaccount.allocator.name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: agones-allocator

{{- end }}

{{- if not .Values.agones.allocator.disableSecretCreation }}
---
# Allocation CA
{{- $selfSigned := genSelfSignedCert "" nil nil 3650 }}
{{- $ca := genCA "allocation-ca" 3650 }}
apiVersion: v1
kind: Secret
metadata:
  name: allocator-client-ca
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
{{- if .Values.agones.allocator.generateClientTLS }}
  allocator-client.default.crt: {{ b64enc $selfSigned.Cert }}
{{- end }}
{{- if .Values.agones.allocator.generateTLS }}
  client-ca.crt: {{ b64enc $ca.Cert }}
{{- else }}
  {{- (.Files.Glob "certs/allocator/client-ca/*").AsSecrets | nindent 2 }}
{{- end }}

---
# Allocation TLS certs
{{- $cert := genSignedCert "" ($useLoadBalancerIP | ternary (list .Values.agones.allocator.http.loadBalancerIP) nil) nil 3650 $ca }}
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: allocator-tls
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
{{- if .Values.agones.allocator.generateTLS }}
  tls.crt: {{ b64enc $cert.Cert }}
  tls.key: {{ b64enc $cert.Key }}
{{- else }}
  tls.crt: {{ .Files.Get "certs/allocator/server.crt" | b64enc }}
  tls.key: {{ .Files.Get "certs/allocator/server.key" | b64enc }}
{{- end }}

---
# Allocation TLS CA
apiVersion: v1
kind: Secret
metadata:
  name: allocator-tls-ca
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "agones.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
{{- if .Values.agones.allocator.generateTLS }}
  tls-ca.crt: {{ b64enc $ca.Cert }}
{{- else }}
  tls-ca.crt: {{ .Files.Get "certs/allocator/server.crt" | b64enc }}
{{- end }}

# Default allocation client secret
{{- if .Values.agones.allocator.generateClientTLS }}
{{- range .Values.gameservers.namespaces }}
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: allocator-client.default
  namespace: {{ . }}
  labels:
    app: {{ template "agones.name" $ }}
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    release: "{{ $.Release.Name }}"
    heritage: "{{ $.Release.Service }}"
data:
  tls.crt: {{ b64enc $selfSigned.Cert }}
  tls.key: {{ b64enc $selfSigned.Key }}
{{- end }}
{{- end }}
{{- end }}
