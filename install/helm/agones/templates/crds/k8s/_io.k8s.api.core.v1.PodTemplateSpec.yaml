# Copyright 2022 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This code was autogenerated. Do not edit directly.

{{- define "io.k8s.api.core.v1.PodTemplateSpec" }}
description: PodTemplateSpec describes the data a pod should have when created from a template
type: object
properties:
  metadata:
    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
    type: object
    properties:
      annotations:
        description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
        type: object
        additionalProperties:
          type: string
      clusterName:
        description: |-
          Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.

          The name in the go struct is changed to help clients detect accidental use.
        type: string
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        type: string
        format: date-time
        nullable: true
      deletionGracePeriodSeconds:
        description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        type: integer
        format: int64
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        type: string
        format: date-time
      finalizers:
        description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        type: array
        items:
          type: string
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        type: string
      generation:
        description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        type: integer
        format: int64
      labels:
        description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
        type: object
        additionalProperties:
          type: string
      managedFields:
        description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
        type: array
        items:
          type: object
          properties:
            apiVersion:
              description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
              type: string
            fieldsType:
              description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
              type: string
            fieldsV1:
              description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
              type: object
            manager:
              description: Manager is an identifier of the workflow managing these fields.
              type: string
            operation:
              description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
              type: string
            subresource:
              description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
              type: string
            time:
              description: Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
              type: string
              format: date-time
      name:
        description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

          Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        type: string
      ownerReferences:
        description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        type: array
        items:
          type: object
          required:
            - apiVersion
            - kind
            - name
            - uid
          properties:
            apiVersion:
              description: API version of the referent.
              type: string
            blockOwnerDeletion:
              description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
              type: boolean
            controller:
              description: If true, this reference points to the managing controller.
              type: boolean
            kind:
              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            name:
              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            uid:
              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
              type: string
          x-kubernetes-map-type: atomic
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

          Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        type: string
      selfLink:
        description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
        type: string
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

          Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
  spec:
    description: 'Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
    type: object
    required:
      - containers
    properties:
      activeDeadlineSeconds:
        description: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        type: integer
        format: int64
      affinity:
        description: If specified, the pod's scheduling constraints
        type: object
        properties:
          nodeAffinity:
            description: Describes node affinity scheduling rules for the pod.
            type: object
            properties:
              preferredDuringSchedulingIgnoredDuringExecution:
                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                type: array
                items:
                  type: object
                  required:
                    - weight
                    - preference
                  properties:
                    preference:
                      description: A node selector term, associated with the corresponding weight.
                      type: object
                      properties:
                        matchExpressions:
                          description: A list of node selector requirements by node's labels.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: The label key that the selector applies to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                  Possible enum values:
                                   - `"DoesNotExist"`
                                   - `"Exists"`
                                   - `"Gt"`
                                   - `"In"`
                                   - `"Lt"`
                                   - `"NotIn"`
                                type: string
                                enum:
                                  - DoesNotExist
                                  - Exists
                                  - Gt
                                  - In
                                  - Lt
                                  - NotIn
                              values:
                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchFields:
                          description: A list of node selector requirements by node's fields.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: The label key that the selector applies to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                  Possible enum values:
                                   - `"DoesNotExist"`
                                   - `"Exists"`
                                   - `"Gt"`
                                   - `"In"`
                                   - `"Lt"`
                                   - `"NotIn"`
                                type: string
                                enum:
                                  - DoesNotExist
                                  - Exists
                                  - Gt
                                  - In
                                  - Lt
                                  - NotIn
                              values:
                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                      x-kubernetes-map-type: atomic
                    weight:
                      description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                      type: integer
                      format: int32
              requiredDuringSchedulingIgnoredDuringExecution:
                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                type: object
                required:
                  - nodeSelectorTerms
                properties:
                  nodeSelectorTerms:
                    description: Required. A list of node selector terms. The terms are ORed.
                    type: array
                    items:
                      type: object
                      properties:
                        matchExpressions:
                          description: A list of node selector requirements by node's labels.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: The label key that the selector applies to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                  Possible enum values:
                                   - `"DoesNotExist"`
                                   - `"Exists"`
                                   - `"Gt"`
                                   - `"In"`
                                   - `"Lt"`
                                   - `"NotIn"`
                                type: string
                                enum:
                                  - DoesNotExist
                                  - Exists
                                  - Gt
                                  - In
                                  - Lt
                                  - NotIn
                              values:
                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchFields:
                          description: A list of node selector requirements by node's fields.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: The label key that the selector applies to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

                                  Possible enum values:
                                   - `"DoesNotExist"`
                                   - `"Exists"`
                                   - `"Gt"`
                                   - `"In"`
                                   - `"Lt"`
                                   - `"NotIn"`
                                type: string
                                enum:
                                  - DoesNotExist
                                  - Exists
                                  - Gt
                                  - In
                                  - Lt
                                  - NotIn
                              values:
                                description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                      x-kubernetes-map-type: atomic
                x-kubernetes-map-type: atomic
          podAffinity:
            description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
            type: object
            properties:
              preferredDuringSchedulingIgnoredDuringExecution:
                description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                type: array
                items:
                  type: object
                  required:
                    - weight
                    - podAffinityTerm
                  properties:
                    podAffinityTerm:
                      description: Required. A pod affinity term, associated with the corresponding weight.
                      type: object
                      required:
                        - topologyKey
                      properties:
                        labelSelector:
                          description: A label query over a set of resources, in this case pods.
                          type: object
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              type: array
                              items:
                                type: object
                                required:
                                  - key
                                  - operator
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    type: array
                                    items:
                                      type: string
                            matchLabels:
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                              additionalProperties:
                                type: string
                          x-kubernetes-map-type: atomic
                        namespaceSelector:
                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                          type: object
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              type: array
                              items:
                                type: object
                                required:
                                  - key
                                  - operator
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    type: array
                                    items:
                                      type: string
                            matchLabels:
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                              additionalProperties:
                                type: string
                          x-kubernetes-map-type: atomic
                        namespaces:
                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                          type: array
                          items:
                            type: string
                        topologyKey:
                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                          type: string
                    weight:
                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                      type: integer
                      format: int32
              requiredDuringSchedulingIgnoredDuringExecution:
                description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                type: array
                items:
                  type: object
                  required:
                    - topologyKey
                  properties:
                    labelSelector:
                      description: A label query over a set of resources, in this case pods.
                      type: object
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                          additionalProperties:
                            type: string
                      x-kubernetes-map-type: atomic
                    namespaceSelector:
                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                      type: object
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                          additionalProperties:
                            type: string
                      x-kubernetes-map-type: atomic
                    namespaces:
                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                      type: array
                      items:
                        type: string
                    topologyKey:
                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                      type: string
          podAntiAffinity:
            description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
            type: object
            properties:
              preferredDuringSchedulingIgnoredDuringExecution:
                description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                type: array
                items:
                  type: object
                  required:
                    - weight
                    - podAffinityTerm
                  properties:
                    podAffinityTerm:
                      description: Required. A pod affinity term, associated with the corresponding weight.
                      type: object
                      required:
                        - topologyKey
                      properties:
                        labelSelector:
                          description: A label query over a set of resources, in this case pods.
                          type: object
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              type: array
                              items:
                                type: object
                                required:
                                  - key
                                  - operator
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    type: array
                                    items:
                                      type: string
                            matchLabels:
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                              additionalProperties:
                                type: string
                          x-kubernetes-map-type: atomic
                        namespaceSelector:
                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                          type: object
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              type: array
                              items:
                                type: object
                                required:
                                  - key
                                  - operator
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    type: array
                                    items:
                                      type: string
                            matchLabels:
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                              additionalProperties:
                                type: string
                          x-kubernetes-map-type: atomic
                        namespaces:
                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                          type: array
                          items:
                            type: string
                        topologyKey:
                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                          type: string
                    weight:
                      description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                      type: integer
                      format: int32
              requiredDuringSchedulingIgnoredDuringExecution:
                description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                type: array
                items:
                  type: object
                  required:
                    - topologyKey
                  properties:
                    labelSelector:
                      description: A label query over a set of resources, in this case pods.
                      type: object
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                          additionalProperties:
                            type: string
                      x-kubernetes-map-type: atomic
                    namespaceSelector:
                      description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                      type: object
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          type: array
                          items:
                            type: object
                            required:
                              - key
                              - operator
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                          additionalProperties:
                            type: string
                      x-kubernetes-map-type: atomic
                    namespaces:
                      description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                      type: array
                      items:
                        type: string
                    topologyKey:
                      description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                      type: string
      automountServiceAccountToken:
        description: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        type: boolean
      containers:
        description: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        type: array
        items:
          type: object
          required:
            - name
          properties:
            args:
              description: 'Arguments to the entrypoint. The container image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            command:
              description: 'Entrypoint array. Not executed within a shell. The container image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            env:
              description: List of environment variables to set in the container. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                properties:
                  name:
                    description: Name of the environment variable. Must be a C_IDENTIFIER.
                    type: string
                  value:
                    description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                    type: string
                  valueFrom:
                    description: Source for the environment variable's value. Cannot be used if value is not empty.
                    type: object
                    properties:
                      configMapKeyRef:
                        description: Selects a key of a ConfigMap.
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key to select.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the ConfigMap or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
                      fieldRef:
                        description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                        type: object
                        required:
                          - fieldPath
                        properties:
                          apiVersion:
                            description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                            type: string
                          fieldPath:
                            description: Path of the field to select in the specified API version.
                            type: string
                        x-kubernetes-map-type: atomic
                      resourceFieldRef:
                        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                        type: object
                        required:
                          - resource
                        properties:
                          containerName:
                            description: 'Container name: required for volumes, optional for env vars'
                            type: string
                          divisor:
                            description: Specifies the output format of the exposed resources, defaults to "1"
                            type: string
                          resource:
                            description: 'Required: resource to select'
                            type: string
                        x-kubernetes-map-type: atomic
                      secretKeyRef:
                        description: Selects a key of a secret in the pod's namespace
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key of the secret to select from.  Must be a valid secret key.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
            envFrom:
              description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
              type: array
              items:
                type: object
                properties:
                  configMapRef:
                    description: The ConfigMap to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the ConfigMap must be defined
                        type: boolean
                  prefix:
                    description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                    type: string
                  secretRef:
                    description: The Secret to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the Secret must be defined
                        type: boolean
            image:
              description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
              type: string
            imagePullPolicy:
              description: |-
                Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

                Possible enum values:
                 - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
                 - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
                 - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
              type: string
              enum:
                - Always
                - IfNotPresent
                - Never
            lifecycle:
              description: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
              type: object
              properties:
                postStart:
                  description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                preStop:
                  description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod''s termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
            livenessProbe:
              description: 'Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            name:
              description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
              type: string
            ports:
              description: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - containerPort
                properties:
                  containerPort:
                    description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                    type: integer
                    format: int32
                  hostIP:
                    description: What host IP to bind the external port to.
                    type: string
                  hostPort:
                    description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                    type: integer
                    format: int32
                  name:
                    description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                    type: string
                  protocol:
                    description: |-
                      Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

                      Possible enum values:
                       - `"SCTP"` is the SCTP protocol.
                       - `"TCP"` is the TCP protocol.
                       - `"UDP"` is the UDP protocol.
                    type: string
                    enum:
                      - SCTP
                      - TCP
                      - UDP
            readinessProbe:
              description: 'Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            resources:
              description: 'Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
              type: object
              properties:
                limits:
                  description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
                requests:
                  description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
            securityContext:
              description: 'SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
              type: object
              properties:
                allowPrivilegeEscalation:
                  description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                  type: boolean
                capabilities:
                  description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    add:
                      description: Added capabilities
                      type: array
                      items:
                        type: string
                    drop:
                      description: Removed capabilities
                      type: array
                      items:
                        type: string
                privileged:
                  description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                procMount:
                  description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                  type: string
                readOnlyRootFilesystem:
                  description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                runAsGroup:
                  description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                runAsNonRoot:
                  description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  type: boolean
                runAsUser:
                  description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                seLinuxOptions:
                  description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    level:
                      description: Level is SELinux level label that applies to the container.
                      type: string
                    role:
                      description: Role is a SELinux role label that applies to the container.
                      type: string
                    type:
                      description: Type is a SELinux type label that applies to the container.
                      type: string
                    user:
                      description: User is a SELinux user label that applies to the container.
                      type: string
                seccompProfile:
                  description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  required:
                    - type
                  properties:
                    localhostProfile:
                      description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                      type: string
                    type:
                      description: |-
                        type indicates which kind of seccomp profile will be applied. Valid options are:

                        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

                        Possible enum values:
                         - `"Localhost"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.
                         - `"RuntimeDefault"` represents the default container runtime seccomp profile.
                         - `"Unconfined"` indicates no seccomp profile is applied (A.K.A. unconfined).
                      type: string
                      enum:
                        - Localhost
                        - RuntimeDefault
                        - Unconfined
                windowsOptions:
                  description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                  type: object
                  properties:
                    gmsaCredentialSpec:
                      description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                      type: string
                    gmsaCredentialSpecName:
                      description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                      type: string
                    hostProcess:
                      description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                      type: boolean
                    runAsUserName:
                      description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                      type: string
            startupProbe:
              description: 'StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod''s lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            stdin:
              description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
              type: boolean
            stdinOnce:
              description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
              type: boolean
            terminationMessagePath:
              description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
              type: string
            terminationMessagePolicy:
              description: |-
                Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

                Possible enum values:
                 - `"FallbackToLogsOnError"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.
                 - `"File"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.
              type: string
              enum:
                - FallbackToLogsOnError
                - File
            tty:
              description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
              type: boolean
            volumeDevices:
              description: volumeDevices is the list of block devices to be used by the container.
              type: array
              items:
                type: object
                required:
                  - name
                  - devicePath
                properties:
                  devicePath:
                    description: devicePath is the path inside of the container that the device will be mapped to.
                    type: string
                  name:
                    description: name must match the name of a persistentVolumeClaim in the pod
                    type: string
            volumeMounts:
              description: Pod volumes to mount into the container's filesystem. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                  - mountPath
                properties:
                  mountPath:
                    description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                    type: string
                  mountPropagation:
                    description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                    type: string
                  name:
                    description: This must match the Name of a Volume.
                    type: string
                  readOnly:
                    description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                    type: boolean
                  subPath:
                    description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                    type: string
                  subPathExpr:
                    description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                    type: string
            workingDir:
              description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
              type: string
      dnsConfig:
        description: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        type: object
        properties:
          nameservers:
            description: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
            type: array
            items:
              type: string
          options:
            description: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
            type: array
            items:
              type: object
              properties:
                name:
                  description: Required.
                  type: string
                value:
                  type: string
          searches:
            description: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
            type: array
            items:
              type: string
      dnsPolicy:
        description: |-
          Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

          Possible enum values:
           - `"ClusterFirst"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
           - `"ClusterFirstWithHostNet"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
           - `"Default"` indicates that the pod should use the default (as determined by kubelet) DNS settings.
           - `"None"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
        type: string
        enum:
          - ClusterFirst
          - ClusterFirstWithHostNet
          - Default
          - None
      enableServiceLinks:
        description: 'EnableServiceLinks indicates whether information about services should be injected into pod''s environment variables, matching the syntax of Docker links. Optional: Defaults to true.'
        type: boolean
      ephemeralContainers:
        description: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
        type: array
        items:
          type: object
          required:
            - name
          properties:
            args:
              description: 'Arguments to the entrypoint. The image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            command:
              description: 'Entrypoint array. Not executed within a shell. The image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            env:
              description: List of environment variables to set in the container. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                properties:
                  name:
                    description: Name of the environment variable. Must be a C_IDENTIFIER.
                    type: string
                  value:
                    description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                    type: string
                  valueFrom:
                    description: Source for the environment variable's value. Cannot be used if value is not empty.
                    type: object
                    properties:
                      configMapKeyRef:
                        description: Selects a key of a ConfigMap.
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key to select.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the ConfigMap or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
                      fieldRef:
                        description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                        type: object
                        required:
                          - fieldPath
                        properties:
                          apiVersion:
                            description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                            type: string
                          fieldPath:
                            description: Path of the field to select in the specified API version.
                            type: string
                        x-kubernetes-map-type: atomic
                      resourceFieldRef:
                        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                        type: object
                        required:
                          - resource
                        properties:
                          containerName:
                            description: 'Container name: required for volumes, optional for env vars'
                            type: string
                          divisor:
                            description: Specifies the output format of the exposed resources, defaults to "1"
                            type: string
                          resource:
                            description: 'Required: resource to select'
                            type: string
                        x-kubernetes-map-type: atomic
                      secretKeyRef:
                        description: Selects a key of a secret in the pod's namespace
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key of the secret to select from.  Must be a valid secret key.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
            envFrom:
              description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
              type: array
              items:
                type: object
                properties:
                  configMapRef:
                    description: The ConfigMap to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the ConfigMap must be defined
                        type: boolean
                  prefix:
                    description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                    type: string
                  secretRef:
                    description: The Secret to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the Secret must be defined
                        type: boolean
            image:
              description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images'
              type: string
            imagePullPolicy:
              description: |-
                Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

                Possible enum values:
                 - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
                 - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
                 - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
              type: string
              enum:
                - Always
                - IfNotPresent
                - Never
            lifecycle:
              description: Lifecycle is not allowed for ephemeral containers.
              type: object
              properties:
                postStart:
                  description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                preStop:
                  description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod''s termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
            livenessProbe:
              description: Probes are not allowed for ephemeral containers.
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            name:
              description: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
              type: string
            ports:
              description: Ports are not allowed for ephemeral containers.
              type: array
              items:
                type: object
                required:
                  - containerPort
                properties:
                  containerPort:
                    description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                    type: integer
                    format: int32
                  hostIP:
                    description: What host IP to bind the external port to.
                    type: string
                  hostPort:
                    description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                    type: integer
                    format: int32
                  name:
                    description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                    type: string
                  protocol:
                    description: |-
                      Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

                      Possible enum values:
                       - `"SCTP"` is the SCTP protocol.
                       - `"TCP"` is the TCP protocol.
                       - `"UDP"` is the UDP protocol.
                    type: string
                    enum:
                      - SCTP
                      - TCP
                      - UDP
            readinessProbe:
              description: Probes are not allowed for ephemeral containers.
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            resources:
              description: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
              type: object
              properties:
                limits:
                  description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
                requests:
                  description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
            securityContext:
              description: 'Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.'
              type: object
              properties:
                allowPrivilegeEscalation:
                  description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                  type: boolean
                capabilities:
                  description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    add:
                      description: Added capabilities
                      type: array
                      items:
                        type: string
                    drop:
                      description: Removed capabilities
                      type: array
                      items:
                        type: string
                privileged:
                  description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                procMount:
                  description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                  type: string
                readOnlyRootFilesystem:
                  description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                runAsGroup:
                  description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                runAsNonRoot:
                  description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  type: boolean
                runAsUser:
                  description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                seLinuxOptions:
                  description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    level:
                      description: Level is SELinux level label that applies to the container.
                      type: string
                    role:
                      description: Role is a SELinux role label that applies to the container.
                      type: string
                    type:
                      description: Type is a SELinux type label that applies to the container.
                      type: string
                    user:
                      description: User is a SELinux user label that applies to the container.
                      type: string
                seccompProfile:
                  description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  required:
                    - type
                  properties:
                    localhostProfile:
                      description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                      type: string
                    type:
                      description: |-
                        type indicates which kind of seccomp profile will be applied. Valid options are:

                        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

                        Possible enum values:
                         - `"Localhost"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.
                         - `"RuntimeDefault"` represents the default container runtime seccomp profile.
                         - `"Unconfined"` indicates no seccomp profile is applied (A.K.A. unconfined).
                      type: string
                      enum:
                        - Localhost
                        - RuntimeDefault
                        - Unconfined
                windowsOptions:
                  description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                  type: object
                  properties:
                    gmsaCredentialSpec:
                      description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                      type: string
                    gmsaCredentialSpecName:
                      description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                      type: string
                    hostProcess:
                      description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                      type: boolean
                    runAsUserName:
                      description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                      type: string
            startupProbe:
              description: Probes are not allowed for ephemeral containers.
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            stdin:
              description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
              type: boolean
            stdinOnce:
              description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
              type: boolean
            targetContainerName:
              description: |-
                If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.

                The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
              type: string
            terminationMessagePath:
              description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
              type: string
            terminationMessagePolicy:
              description: |-
                Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

                Possible enum values:
                 - `"FallbackToLogsOnError"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.
                 - `"File"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.
              type: string
              enum:
                - FallbackToLogsOnError
                - File
            tty:
              description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
              type: boolean
            volumeDevices:
              description: volumeDevices is the list of block devices to be used by the container.
              type: array
              items:
                type: object
                required:
                  - name
                  - devicePath
                properties:
                  devicePath:
                    description: devicePath is the path inside of the container that the device will be mapped to.
                    type: string
                  name:
                    description: name must match the name of a persistentVolumeClaim in the pod
                    type: string
            volumeMounts:
              description: Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                  - mountPath
                properties:
                  mountPath:
                    description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                    type: string
                  mountPropagation:
                    description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                    type: string
                  name:
                    description: This must match the Name of a Volume.
                    type: string
                  readOnly:
                    description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                    type: boolean
                  subPath:
                    description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                    type: string
                  subPathExpr:
                    description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                    type: string
            workingDir:
              description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
              type: string
      hostAliases:
        description: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        type: array
        items:
          type: object
          properties:
            hostnames:
              description: Hostnames for the above IP address.
              type: array
              items:
                type: string
            ip:
              description: IP address of the host file entry.
              type: string
      hostIPC:
        description: 'Use the host''s ipc namespace. Optional: Default to false.'
        type: boolean
      hostNetwork:
        description: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        type: boolean
      hostPID:
        description: 'Use the host''s pid namespace. Optional: Default to false.'
        type: boolean
      hostname:
        description: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        type: string
      imagePullSecrets:
        description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
        type: array
        items:
          type: object
          properties:
            name:
              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
              type: string
          x-kubernetes-map-type: atomic
      initContainers:
        description: 'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/'
        type: array
        items:
          type: object
          required:
            - name
          properties:
            args:
              description: 'Arguments to the entrypoint. The container image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            command:
              description: 'Entrypoint array. Not executed within a shell. The container image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
              type: array
              items:
                type: string
            env:
              description: List of environment variables to set in the container. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                properties:
                  name:
                    description: Name of the environment variable. Must be a C_IDENTIFIER.
                    type: string
                  value:
                    description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                    type: string
                  valueFrom:
                    description: Source for the environment variable's value. Cannot be used if value is not empty.
                    type: object
                    properties:
                      configMapKeyRef:
                        description: Selects a key of a ConfigMap.
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key to select.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the ConfigMap or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
                      fieldRef:
                        description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                        type: object
                        required:
                          - fieldPath
                        properties:
                          apiVersion:
                            description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                            type: string
                          fieldPath:
                            description: Path of the field to select in the specified API version.
                            type: string
                        x-kubernetes-map-type: atomic
                      resourceFieldRef:
                        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                        type: object
                        required:
                          - resource
                        properties:
                          containerName:
                            description: 'Container name: required for volumes, optional for env vars'
                            type: string
                          divisor:
                            description: Specifies the output format of the exposed resources, defaults to "1"
                            type: string
                          resource:
                            description: 'Required: resource to select'
                            type: string
                        x-kubernetes-map-type: atomic
                      secretKeyRef:
                        description: Selects a key of a secret in the pod's namespace
                        type: object
                        required:
                          - key
                        properties:
                          key:
                            description: The key of the secret to select from.  Must be a valid secret key.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must be defined
                            type: boolean
                        x-kubernetes-map-type: atomic
            envFrom:
              description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
              type: array
              items:
                type: object
                properties:
                  configMapRef:
                    description: The ConfigMap to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the ConfigMap must be defined
                        type: boolean
                  prefix:
                    description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                    type: string
                  secretRef:
                    description: The Secret to select from
                    type: object
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      optional:
                        description: Specify whether the Secret must be defined
                        type: boolean
            image:
              description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
              type: string
            imagePullPolicy:
              description: |-
                Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

                Possible enum values:
                 - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
                 - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
                 - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
              type: string
              enum:
                - Always
                - IfNotPresent
                - Never
            lifecycle:
              description: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
              type: object
              properties:
                postStart:
                  description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                preStop:
                  description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod''s termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                  type: object
                  properties:
                    exec:
                      description: Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP allows repeated headers.
                          type: array
                          items:
                            type: object
                            required:
                              - name
                              - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: |-
                            Scheme to use for connecting to the host. Defaults to HTTP.

                            Possible enum values:
                             - `"HTTP"` means that the scheme used will be http://
                             - `"HTTPS"` means that the scheme used will be https://
                          type: string
                          enum:
                            - HTTP
                            - HTTPS
                    tcpSocket:
                      description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
                      type: object
                      required:
                        - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                          format: int-or-string
                          x-kubernetes-int-or-string: true
            livenessProbe:
              description: 'Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            name:
              description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
              type: string
            ports:
              description: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - containerPort
                properties:
                  containerPort:
                    description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                    type: integer
                    format: int32
                  hostIP:
                    description: What host IP to bind the external port to.
                    type: string
                  hostPort:
                    description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                    type: integer
                    format: int32
                  name:
                    description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                    type: string
                  protocol:
                    description: |-
                      Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

                      Possible enum values:
                       - `"SCTP"` is the SCTP protocol.
                       - `"TCP"` is the TCP protocol.
                       - `"UDP"` is the UDP protocol.
                    type: string
                    enum:
                      - SCTP
                      - TCP
                      - UDP
            readinessProbe:
              description: 'Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            resources:
              description: 'Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
              type: object
              properties:
                limits:
                  description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
                requests:
                  description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                  type: object
                  additionalProperties:
                    type: string
            securityContext:
              description: 'SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
              type: object
              properties:
                allowPrivilegeEscalation:
                  description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
                  type: boolean
                capabilities:
                  description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    add:
                      description: Added capabilities
                      type: array
                      items:
                        type: string
                    drop:
                      description: Removed capabilities
                      type: array
                      items:
                        type: string
                privileged:
                  description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                procMount:
                  description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
                  type: string
                readOnlyRootFilesystem:
                  description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
                  type: boolean
                runAsGroup:
                  description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                runAsNonRoot:
                  description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  type: boolean
                runAsUser:
                  description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: integer
                  format: int64
                seLinuxOptions:
                  description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  properties:
                    level:
                      description: Level is SELinux level label that applies to the container.
                      type: string
                    role:
                      description: Role is a SELinux role label that applies to the container.
                      type: string
                    type:
                      description: Type is a SELinux type label that applies to the container.
                      type: string
                    user:
                      description: User is a SELinux user label that applies to the container.
                      type: string
                seccompProfile:
                  description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
                  type: object
                  required:
                    - type
                  properties:
                    localhostProfile:
                      description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                      type: string
                    type:
                      description: |-
                        type indicates which kind of seccomp profile will be applied. Valid options are:

                        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

                        Possible enum values:
                         - `"Localhost"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.
                         - `"RuntimeDefault"` represents the default container runtime seccomp profile.
                         - `"Unconfined"` indicates no seccomp profile is applied (A.K.A. unconfined).
                      type: string
                      enum:
                        - Localhost
                        - RuntimeDefault
                        - Unconfined
                windowsOptions:
                  description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
                  type: object
                  properties:
                    gmsaCredentialSpec:
                      description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                      type: string
                    gmsaCredentialSpecName:
                      description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                      type: string
                    hostProcess:
                      description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                      type: boolean
                    runAsUserName:
                      description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                      type: string
            startupProbe:
              description: 'StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod''s lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
              type: object
              properties:
                exec:
                  description: Exec specifies the action to take.
                  type: object
                  properties:
                    command:
                      description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                      type: array
                      items:
                        type: string
                failureThreshold:
                  description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  type: integer
                  format: int32
                grpc:
                  description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
                  type: object
                  required:
                    - port
                  properties:
                    port:
                      description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                      type: integer
                      format: int32
                    service:
                      description: |-
                        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                        If this is not specified, the default behavior is defined by gRPC.
                      type: string
                httpGet:
                  description: HTTPGet specifies the http request to perform.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                      type: string
                    httpHeaders:
                      description: Custom headers to set in the request. HTTP allows repeated headers.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - value
                        properties:
                          name:
                            description: The header field name
                            type: string
                          value:
                            description: The header field value
                            type: string
                    path:
                      description: Path to access on the HTTP server.
                      type: string
                    port:
                      description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                    scheme:
                      description: |-
                        Scheme to use for connecting to the host. Defaults to HTTP.

                        Possible enum values:
                         - `"HTTP"` means that the scheme used will be http://
                         - `"HTTPS"` means that the scheme used will be https://
                      type: string
                      enum:
                        - HTTP
                        - HTTPS
                initialDelaySeconds:
                  description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
                periodSeconds:
                  description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  type: integer
                  format: int32
                successThreshold:
                  description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  type: integer
                  format: int32
                tcpSocket:
                  description: TCPSocket specifies an action involving a TCP port.
                  type: object
                  required:
                    - port
                  properties:
                    host:
                      description: 'Optional: Host name to connect to, defaults to the pod IP.'
                      type: string
                    port:
                      description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                      format: int-or-string
                      x-kubernetes-int-or-string: true
                terminationGracePeriodSeconds:
                  description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                  type: integer
                  format: int64
                timeoutSeconds:
                  description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: integer
                  format: int32
            stdin:
              description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
              type: boolean
            stdinOnce:
              description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
              type: boolean
            terminationMessagePath:
              description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
              type: string
            terminationMessagePolicy:
              description: |-
                Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

                Possible enum values:
                 - `"FallbackToLogsOnError"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.
                 - `"File"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.
              type: string
              enum:
                - FallbackToLogsOnError
                - File
            tty:
              description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
              type: boolean
            volumeDevices:
              description: volumeDevices is the list of block devices to be used by the container.
              type: array
              items:
                type: object
                required:
                  - name
                  - devicePath
                properties:
                  devicePath:
                    description: devicePath is the path inside of the container that the device will be mapped to.
                    type: string
                  name:
                    description: name must match the name of a persistentVolumeClaim in the pod
                    type: string
            volumeMounts:
              description: Pod volumes to mount into the container's filesystem. Cannot be updated.
              type: array
              items:
                type: object
                required:
                  - name
                  - mountPath
                properties:
                  mountPath:
                    description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                    type: string
                  mountPropagation:
                    description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                    type: string
                  name:
                    description: This must match the Name of a Volume.
                    type: string
                  readOnly:
                    description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                    type: boolean
                  subPath:
                    description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                    type: string
                  subPathExpr:
                    description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                    type: string
            workingDir:
              description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
              type: string
      nodeName:
        description: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        type: string
      nodeSelector:
        description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
        type: object
        additionalProperties:
          type: string
        x-kubernetes-map-type: atomic
      os:
        description: |-
          Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.

          If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions

          If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is a beta field and requires the IdentifyPodOS feature
        type: object
        required:
          - name
        properties:
          name:
            description: 'Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null'
            type: string
      overhead:
        description: 'Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md'
        type: object
        additionalProperties:
          type: string
      preemptionPolicy:
        description: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
        type: string
      priority:
        description: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        type: integer
        format: int32
      priorityClassName:
        description: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        type: string
      readinessGates:
        description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates'
        type: array
        items:
          type: object
          required:
            - conditionType
          properties:
            conditionType:
              description: ConditionType refers to a condition in the pod's condition list with matching type.
              type: string
      restartPolicy:
        description: |-
          Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy

          Possible enum values:
           - `"Always"`
           - `"Never"`
           - `"OnFailure"`
        type: string
        enum:
          - Always
          - Never
          - OnFailure
      runtimeClassName:
        description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class'
        type: string
      schedulerName:
        description: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        type: string
      securityContext:
        description: 'SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.'
        type: object
        properties:
          fsGroup:
            description: |-
              A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

              1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

              If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
            type: integer
            format: int64
          fsGroupChangePolicy:
            description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.'
            type: string
          runAsGroup:
            description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            type: integer
            format: int64
          runAsNonRoot:
            description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            type: boolean
          runAsUser:
            description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            type: integer
            format: int64
          seLinuxOptions:
            description: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
            type: object
            properties:
              level:
                description: Level is SELinux level label that applies to the container.
                type: string
              role:
                description: Role is a SELinux role label that applies to the container.
                type: string
              type:
                description: Type is a SELinux type label that applies to the container.
                type: string
              user:
                description: User is a SELinux user label that applies to the container.
                type: string
          seccompProfile:
            description: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
            type: object
            required:
              - type
            properties:
              localhostProfile:
                description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                type: string
              type:
                description: |-
                  type indicates which kind of seccomp profile will be applied. Valid options are:

                  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

                  Possible enum values:
                   - `"Localhost"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.
                   - `"RuntimeDefault"` represents the default container runtime seccomp profile.
                   - `"Unconfined"` indicates no seccomp profile is applied (A.K.A. unconfined).
                type: string
                enum:
                  - Localhost
                  - RuntimeDefault
                  - Unconfined
          supplementalGroups:
            description: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
            type: array
            items:
              type: integer
              format: int64
          sysctls:
            description: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
            type: array
            items:
              type: object
              required:
                - name
                - value
              properties:
                name:
                  description: Name of a property to set
                  type: string
                value:
                  description: Value of a property to set
                  type: string
          windowsOptions:
            description: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
            type: object
            properties:
              gmsaCredentialSpec:
                description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                type: string
              gmsaCredentialSpecName:
                description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                type: string
              hostProcess:
                description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
                type: boolean
              runAsUserName:
                description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                type: string
      serviceAccount:
        description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.'
        type: string
      serviceAccountName:
        description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
        type: string
      setHostnameAsFQDN:
        description: If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
        type: boolean
      shareProcessNamespace:
        description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.'
        type: boolean
      subdomain:
        description: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        type: string
      terminationGracePeriodSeconds:
        description: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        type: integer
        format: int64
      tolerations:
        description: If specified, the pod's tolerations.
        type: array
        items:
          type: object
          properties:
            effect:
              description: |-
                Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

                Possible enum values:
                 - `"NoExecute"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.
                 - `"NoSchedule"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.
                 - `"PreferNoSchedule"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
              type: string
              enum:
                - NoExecute
                - NoSchedule
                - PreferNoSchedule
            key:
              description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
              type: string
            operator:
              description: |-
                Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

                Possible enum values:
                 - `"Equal"`
                 - `"Exists"`
              type: string
              enum:
                - Equal
                - Exists
            tolerationSeconds:
              description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
              type: integer
              format: int64
            value:
              description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
              type: string
      topologySpreadConstraints:
        description: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
        type: array
        items:
          type: object
          required:
            - maxSkew
            - topologyKey
            - whenUnsatisfiable
          properties:
            labelSelector:
              description: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
              type: object
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                  type: array
                  items:
                    type: object
                    required:
                      - key
                      - operator
                    properties:
                      key:
                        description: key is the label key that the selector applies to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                        type: array
                        items:
                          type: string
                matchLabels:
                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                  type: object
                  additionalProperties:
                    type: string
              x-kubernetes-map-type: atomic
            maxSkew:
              description: 'MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It''s a required field. Default value is 1 and 0 is not allowed.'
              type: integer
              format: int32
            minDomains:
              description: |-
                MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

                For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.

                This is an alpha field and requires enabling MinDomainsInPodTopologySpread feature gate.
              type: integer
              format: int32
            topologyKey:
              description: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes match the node selector. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
              type: string
            whenUnsatisfiable:
              description: |-
                WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
                  but giving higher precedence to topologies that would help reduce the
                  skew.
                A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.

                Possible enum values:
                 - `"DoNotSchedule"` instructs the scheduler not to schedule the pod when constraints are not satisfied.
                 - `"ScheduleAnyway"` instructs the scheduler to schedule the pod even if constraints are not satisfied.
              type: string
              enum:
                - DoNotSchedule
                - ScheduleAnyway
      volumes:
        description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes'
        type: array
        items:
          type: object
          required:
            - name
          properties:
            awsElasticBlockStore:
              description: 'awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
              type: object
              required:
                - volumeID
              properties:
                fsType:
                  description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                  type: string
                partition:
                  description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).'
                  type: integer
                  format: int32
                readOnly:
                  description: 'readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                  type: boolean
                volumeID:
                  description: 'volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                  type: string
            azureDisk:
              description: azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
              type: object
              required:
                - diskName
                - diskURI
              properties:
                cachingMode:
                  description: 'cachingMode is the Host Caching mode: None, Read Only, Read Write.'
                  type: string
                diskName:
                  description: diskName is the Name of the data disk in the blob storage
                  type: string
                diskURI:
                  description: diskURI is the URI of data disk in the blob storage
                  type: string
                fsType:
                  description: fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                kind:
                  description: 'kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared'
                  type: string
                readOnly:
                  description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  type: boolean
            azureFile:
              description: azureFile represents an Azure File Service mount on the host and bind mount to the pod.
              type: object
              required:
                - secretName
                - shareName
              properties:
                readOnly:
                  description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  type: boolean
                secretName:
                  description: secretName is the  name of secret that contains Azure Storage Account Name and Key
                  type: string
                shareName:
                  description: shareName is the azure share Name
                  type: string
            cephfs:
              description: cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
              type: object
              required:
                - monitors
              properties:
                monitors:
                  description: 'monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                  type: array
                  items:
                    type: string
                path:
                  description: 'path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /'
                  type: string
                readOnly:
                  description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                  type: boolean
                secretFile:
                  description: 'secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                  type: string
                secretRef:
                  description: 'secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                user:
                  description: 'user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                  type: string
            cinder:
              description: 'cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
              type: object
              required:
                - volumeID
              properties:
                fsType:
                  description: 'fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                  type: string
                readOnly:
                  description: 'readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                  type: boolean
                secretRef:
                  description: 'secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.'
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                volumeID:
                  description: 'volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                  type: string
            configMap:
              description: configMap represents a configMap that should populate this volume
              type: object
              properties:
                defaultMode:
                  description: 'defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                  type: integer
                  format: int32
                items:
                  description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  type: array
                  items:
                    type: object
                    required:
                      - key
                      - path
                    properties:
                      key:
                        description: key is the key to project.
                        type: string
                      mode:
                        description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                        type: integer
                        format: int32
                      path:
                        description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                        type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                optional:
                  description: optional specify whether the ConfigMap or its keys must be defined
                  type: boolean
            csi:
              description: csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
              type: object
              required:
                - driver
              properties:
                driver:
                  description: driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
                  type: string
                fsType:
                  description: fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
                  type: string
                nodePublishSecretRef:
                  description: nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                readOnly:
                  description: readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
                  type: boolean
                volumeAttributes:
                  description: volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
                  type: object
                  additionalProperties:
                    type: string
            downwardAPI:
              description: downwardAPI represents downward API about the pod that should populate this volume
              type: object
              properties:
                defaultMode:
                  description: 'Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                  type: integer
                  format: int32
                items:
                  description: Items is a list of downward API volume file
                  type: array
                  items:
                    type: object
                    required:
                      - path
                    properties:
                      fieldRef:
                        description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
                        type: object
                        required:
                          - fieldPath
                        properties:
                          apiVersion:
                            description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                            type: string
                          fieldPath:
                            description: Path of the field to select in the specified API version.
                            type: string
                        x-kubernetes-map-type: atomic
                      mode:
                        description: 'Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                        type: integer
                        format: int32
                      path:
                        description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
                        type: string
                      resourceFieldRef:
                        description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
                        type: object
                        required:
                          - resource
                        properties:
                          containerName:
                            description: 'Container name: required for volumes, optional for env vars'
                            type: string
                          divisor:
                            description: Specifies the output format of the exposed resources, defaults to "1"
                            type: string
                          resource:
                            description: 'Required: resource to select'
                            type: string
                        x-kubernetes-map-type: atomic
            emptyDir:
              description: 'emptyDir represents a temporary directory that shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
              type: object
              properties:
                medium:
                  description: 'medium represents what type of storage medium should back this directory. The default is "" which means to use the node''s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                  type: string
                sizeLimit:
                  description: 'sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
                  type: string
            ephemeral:
              description: |-
                ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.

                Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
                   tracking are needed,
                c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
                   a PersistentVolumeClaim (see EphemeralVolumeSource for more
                   information on the connection between this volume type
                   and PersistentVolumeClaim).

                Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.

                Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.

                A pod can use both types of ephemeral volumes and persistent volumes at the same time.
              type: object
              properties:
                volumeClaimTemplate:
                  description: |-
                    Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).

                    An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.

                    This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.

                    Required, must not be nil.
                  type: object
                  required:
                    - spec
                  properties:
                    metadata:
                      description: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                      type: object
                      properties:
                        annotations:
                          description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                          type: object
                          additionalProperties:
                            type: string
                        clusterName:
                          description: |-
                            Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.

                            The name in the go struct is changed to help clients detect accidental use.
                          type: string
                        creationTimestamp:
                          description: |-
                            CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

                            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                          type: string
                          format: date-time
                          nullable: true
                        deletionGracePeriodSeconds:
                          description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
                          type: integer
                          format: int64
                        deletionTimestamp:
                          description: |-
                            DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

                            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                          type: string
                          format: date-time
                        finalizers:
                          description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
                          type: array
                          items:
                            type: string
                        generateName:
                          description: |-
                            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

                            If this field is specified and the generated name exists, the server will return a 409.

                            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                          type: string
                        generation:
                          description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
                          type: integer
                          format: int64
                        labels:
                          description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                          type: object
                          additionalProperties:
                            type: string
                        managedFields:
                          description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
                          type: array
                          items:
                            type: object
                            properties:
                              apiVersion:
                                description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
                                type: string
                              fieldsType:
                                description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
                                type: string
                              fieldsV1:
                                description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
                                type: object
                              manager:
                                description: Manager is an identifier of the workflow managing these fields.
                                type: string
                              operation:
                                description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
                                type: string
                              subresource:
                                description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
                                type: string
                              time:
                                description: Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
                                type: string
                                format: date-time
                        name:
                          description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        namespace:
                          description: |-
                            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

                            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
                          type: string
                        ownerReferences:
                          description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
                          type: array
                          items:
                            type: object
                            required:
                              - apiVersion
                              - kind
                              - name
                              - uid
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              blockOwnerDeletion:
                                description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
                                type: boolean
                              controller:
                                description: If true, this reference points to the managing controller.
                                type: boolean
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                type: string
                            x-kubernetes-map-type: atomic
                        resourceVersion:
                          description: |-
                            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

                            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                          type: string
                        selfLink:
                          description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
                          type: string
                        uid:
                          description: |-
                            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

                            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                          type: string
                    spec:
                      description: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                      type: object
                      properties:
                        accessModes:
                          description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                          type: array
                          items:
                            type: string
                        dataSource:
                          description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.'
                          type: object
                          required:
                            - kind
                            - name
                          properties:
                            apiGroup:
                              description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                              type: string
                            kind:
                              description: Kind is the type of resource being referenced
                              type: string
                            name:
                              description: Name is the name of resource being referenced
                              type: string
                          x-kubernetes-map-type: atomic
                        dataSourceRef:
                          description: |-
                            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim objects.
                            * While DataSource ignores disallowed values (dropping them), DataSourceRef
                              preserves all values, and generates an error if a disallowed value is
                              specified.
                            (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                          type: object
                          required:
                            - kind
                            - name
                          properties:
                            apiGroup:
                              description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                              type: string
                            kind:
                              description: Kind is the type of resource being referenced
                              type: string
                            name:
                              description: Name is the name of resource being referenced
                              type: string
                          x-kubernetes-map-type: atomic
                        resources:
                          description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                          type: object
                          properties:
                            limits:
                              description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                              additionalProperties:
                                type: string
                            requests:
                              description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                              additionalProperties:
                                type: string
                        selector:
                          description: selector is a label query over volumes to consider for binding.
                          type: object
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              type: array
                              items:
                                type: object
                                required:
                                  - key
                                  - operator
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    type: array
                                    items:
                                      type: string
                            matchLabels:
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                              additionalProperties:
                                type: string
                          x-kubernetes-map-type: atomic
                        storageClassName:
                          description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                          type: string
                        volumeMode:
                          description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                          type: string
                        volumeName:
                          description: volumeName is the binding reference to the PersistentVolume backing this claim.
                          type: string
            fc:
              description: fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
              type: object
              properties:
                fsType:
                  description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                lun:
                  description: 'lun is Optional: FC target lun number'
                  type: integer
                  format: int32
                readOnly:
                  description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                  type: boolean
                targetWWNs:
                  description: 'targetWWNs is Optional: FC target worldwide names (WWNs)'
                  type: array
                  items:
                    type: string
                wwids:
                  description: 'wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.'
                  type: array
                  items:
                    type: string
            flexVolume:
              description: flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
              type: object
              required:
                - driver
              properties:
                driver:
                  description: driver is the name of the driver to use for this volume.
                  type: string
                fsType:
                  description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                  type: string
                options:
                  description: 'options is Optional: this field holds extra command options if any.'
                  type: object
                  additionalProperties:
                    type: string
                readOnly:
                  description: 'readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                  type: boolean
                secretRef:
                  description: 'secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.'
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
            flocker:
              description: flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
              type: object
              properties:
                datasetName:
                  description: datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
                  type: string
                datasetUUID:
                  description: datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                  type: string
            gcePersistentDisk:
              description: 'gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
              type: object
              required:
                - pdName
              properties:
                fsType:
                  description: 'fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                  type: string
                partition:
                  description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                  type: integer
                  format: int32
                pdName:
                  description: 'pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                  type: string
                readOnly:
                  description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                  type: boolean
            gitRepo:
              description: 'gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod''s container.'
              type: object
              required:
                - repository
              properties:
                directory:
                  description: directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
                  type: string
                repository:
                  description: repository is the URL
                  type: string
                revision:
                  description: revision is the commit hash for the specified revision.
                  type: string
            glusterfs:
              description: 'glusterfs represents a Glusterfs mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
              type: object
              required:
                - endpoints
                - path
              properties:
                endpoints:
                  description: 'endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                  type: string
                path:
                  description: 'path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                  type: string
                readOnly:
                  description: 'readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                  type: boolean
            hostPath:
              description: 'hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
              type: object
              required:
                - path
              properties:
                path:
                  description: 'path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                  type: string
                type:
                  description: 'type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                  type: string
            iscsi:
              description: 'iscsi represents an ISCSI Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
              type: object
              required:
                - targetPortal
                - iqn
                - lun
              properties:
                chapAuthDiscovery:
                  description: chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                  type: boolean
                chapAuthSession:
                  description: chapAuthSession defines whether support iSCSI Session CHAP authentication
                  type: boolean
                fsType:
                  description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi'
                  type: string
                initiatorName:
                  description: initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                  type: string
                iqn:
                  description: iqn is the target iSCSI Qualified Name.
                  type: string
                iscsiInterface:
                  description: iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                  type: string
                lun:
                  description: lun represents iSCSI Target Lun number.
                  type: integer
                  format: int32
                portals:
                  description: portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  type: array
                  items:
                    type: string
                readOnly:
                  description: readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                  type: boolean
                secretRef:
                  description: secretRef is the CHAP Secret for iSCSI target and initiator authentication
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                targetPortal:
                  description: targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  type: string
            name:
              description: 'name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
              type: string
            nfs:
              description: 'nfs represents an NFS mount on the host that shares a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
              type: object
              required:
                - server
                - path
              properties:
                path:
                  description: 'path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                  type: string
                readOnly:
                  description: 'readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                  type: boolean
                server:
                  description: 'server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                  type: string
            persistentVolumeClaim:
              description: 'persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
              type: object
              required:
                - claimName
              properties:
                claimName:
                  description: 'claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                  type: string
                readOnly:
                  description: readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
                  type: boolean
            photonPersistentDisk:
              description: photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
              type: object
              required:
                - pdID
              properties:
                fsType:
                  description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                pdID:
                  description: pdID is the ID that identifies Photon Controller persistent disk
                  type: string
            portworxVolume:
              description: portworxVolume represents a portworx volume attached and mounted on kubelets host machine
              type: object
              required:
                - volumeID
              properties:
                fsType:
                  description: fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                readOnly:
                  description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  type: boolean
                volumeID:
                  description: volumeID uniquely identifies a Portworx volume
                  type: string
            projected:
              description: projected items for all in one resources secrets, configmaps, and downward API
              type: object
              properties:
                defaultMode:
                  description: defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  type: integer
                  format: int32
                sources:
                  description: sources is the list of volume projections
                  type: array
                  items:
                    type: object
                    properties:
                      configMap:
                        description: configMap information about the configMap data to project
                        type: object
                        properties:
                          items:
                            description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                            type: array
                            items:
                              type: object
                              required:
                                - key
                                - path
                              properties:
                                key:
                                  description: key is the key to project.
                                  type: string
                                mode:
                                  description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  type: integer
                                  format: int32
                                path:
                                  description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                  type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: optional specify whether the ConfigMap or its keys must be defined
                            type: boolean
                      downwardAPI:
                        description: downwardAPI information about the downwardAPI data to project
                        type: object
                        properties:
                          items:
                            description: Items is a list of DownwardAPIVolume file
                            type: array
                            items:
                              type: object
                              required:
                                - path
                              properties:
                                fieldRef:
                                  description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
                                  type: object
                                  required:
                                    - fieldPath
                                  properties:
                                    apiVersion:
                                      description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                      type: string
                                    fieldPath:
                                      description: Path of the field to select in the specified API version.
                                      type: string
                                  x-kubernetes-map-type: atomic
                                mode:
                                  description: 'Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  type: integer
                                  format: int32
                                path:
                                  description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
                                  type: string
                                resourceFieldRef:
                                  description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
                                  type: object
                                  required:
                                    - resource
                                  properties:
                                    containerName:
                                      description: 'Container name: required for volumes, optional for env vars'
                                      type: string
                                    divisor:
                                      description: Specifies the output format of the exposed resources, defaults to "1"
                                      type: string
                                    resource:
                                      description: 'Required: resource to select'
                                      type: string
                                  x-kubernetes-map-type: atomic
                      secret:
                        description: secret information about the secret data to project
                        type: object
                        properties:
                          items:
                            description: items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                            type: array
                            items:
                              type: object
                              required:
                                - key
                                - path
                              properties:
                                key:
                                  description: key is the key to project.
                                  type: string
                                mode:
                                  description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                  type: integer
                                  format: int32
                                path:
                                  description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                  type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          optional:
                            description: optional field specify whether the Secret or its key must be defined
                            type: boolean
                      serviceAccountToken:
                        description: serviceAccountToken is information about the serviceAccountToken data to project
                        type: object
                        required:
                          - path
                        properties:
                          audience:
                            description: audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
                            type: string
                          expirationSeconds:
                            description: expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
                            type: integer
                            format: int64
                          path:
                            description: path is the path relative to the mount point of the file to project the token into.
                            type: string
            quobyte:
              description: quobyte represents a Quobyte mount on the host that shares a pod's lifetime
              type: object
              required:
                - registry
                - volume
              properties:
                group:
                  description: group to map volume access to Default is no group
                  type: string
                readOnly:
                  description: readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
                  type: boolean
                registry:
                  description: registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
                  type: string
                tenant:
                  description: tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                  type: string
                user:
                  description: user to map volume access to Defaults to serivceaccount user
                  type: string
                volume:
                  description: volume is a string that references an already created Quobyte volume by name.
                  type: string
            rbd:
              description: 'rbd represents a Rados Block Device mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
              type: object
              required:
                - monitors
                - image
              properties:
                fsType:
                  description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd'
                  type: string
                image:
                  description: 'image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: string
                keyring:
                  description: 'keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: string
                monitors:
                  description: 'monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: array
                  items:
                    type: string
                pool:
                  description: 'pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: string
                readOnly:
                  description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: boolean
                secretRef:
                  description: 'secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                user:
                  description: 'user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                  type: string
            scaleIO:
              description: scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
              type: object
              required:
                - gateway
                - system
                - secretRef
              properties:
                fsType:
                  description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                  type: string
                gateway:
                  description: gateway is the host address of the ScaleIO API Gateway.
                  type: string
                protectionDomain:
                  description: protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                  type: string
                readOnly:
                  description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  type: boolean
                secretRef:
                  description: secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                sslEnabled:
                  description: sslEnabled Flag enable/disable SSL communication with Gateway, default false
                  type: boolean
                storageMode:
                  description: storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                  type: string
                storagePool:
                  description: storagePool is the ScaleIO Storage Pool associated with the protection domain.
                  type: string
                system:
                  description: system is the name of the storage system as configured in ScaleIO.
                  type: string
                volumeName:
                  description: volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
                  type: string
            secret:
              description: 'secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
              type: object
              properties:
                defaultMode:
                  description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                  type: integer
                  format: int32
                items:
                  description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  type: array
                  items:
                    type: object
                    required:
                      - key
                      - path
                    properties:
                      key:
                        description: key is the key to project.
                        type: string
                      mode:
                        description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                        type: integer
                        format: int32
                      path:
                        description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                        type: string
                optional:
                  description: optional field specify whether the Secret or its keys must be defined
                  type: boolean
                secretName:
                  description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                  type: string
            storageos:
              description: storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
              type: object
              properties:
                fsType:
                  description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                readOnly:
                  description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  type: boolean
                secretRef:
                  description: secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                  type: object
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                  x-kubernetes-map-type: atomic
                volumeName:
                  description: volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                  type: string
                volumeNamespace:
                  description: volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                  type: string
            vsphereVolume:
              description: vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
              type: object
              required:
                - volumePath
              properties:
                fsType:
                  description: fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  type: string
                storagePolicyID:
                  description: storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                  type: string
                storagePolicyName:
                  description: storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                  type: string
                volumePath:
                  description: volumePath is the path that identifies vSphere volume vmdk
                  type: string
{{- end }}
