# Copyright 2025 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $featureGates := include "agones.featureGates" . | fromYaml }}
{{- if $featureGates.ProcessorAllocator }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agones-processor
  namespace: {{ .Release.Namespace }}
  labels:
    component: processor
    app: {{ template "agones.name" . }}
    chart: {{ template "agones.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.agones.allocator.processor.replicas }}
  selector:
    matchLabels:
      agones.dev/role: processor
      app: {{ template "agones.name" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
{{- if and (.Values.agones.metrics.prometheusServiceDiscovery) (.Values.agones.metrics.prometheusEnabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.agones.allocator.processor.http.port | quote }}
        prometheus.io/path: "/metrics"
{{- end }}
{{- if .Values.agones.allocator.processor.annotations }}
{{- toYaml .Values.agones.allocator.processor.annotations | nindent 8 }}
{{- end }}
      labels:
        agones.dev/role: processor
        app: {{ template "agones.name" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
{{- if .Values.agones.allocator.processor.labels }}
{{- toYaml .Values.agones.allocator.processor.labels | nindent 8 }}
{{- end }}
    spec:
      {{- if .Values.agones.allocator.processor.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml .Values.agones.allocator.processor.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      affinity:
      {{- if .Values.agones.allocator.processor.affinity }}
      {{- if .Values.agones.requireDedicatedNodes }}
      {{- fail "agones.allocator.processor.affinity and agones.requireDedicatedNodes cannot be set at the same time!" }}
      {{- end}}
      {{- end}}
      {{- if .Values.agones.allocator.processor.affinity }}
{{ toYaml .Values.agones.allocator.processor.affinity | indent 8 }}
      {{- else}}
        nodeAffinity:
          {{- if .Values.agones.requireDedicatedNodes }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
          {{- else}}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
          {{- end }}
              - key: agones.dev/agones-system
                operator: Exists
      {{- end }}
      {{- if .Values.agones.allocator.processor.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.agones.allocator.processor.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.agones.allocator.processor.tolerations }}
      tolerations:
{{ toYaml .Values.agones.allocator.processor.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.agones.createPriorityClass }}
      priorityClassName: {{ .Values.agones.priorityClassName }}
      {{- end }}
      serviceAccountName: {{ .Values.agones.serviceaccount.controller.name }}
      terminationGracePeriodSeconds: {{ mul .Values.agones.allocator.processor.readiness.periodSeconds .Values.agones.allocator.processor.readiness.failureThreshold 3 }}
      containers:
      - name: agones-processor
        image: "{{ .Values.agones.image.registry }}/{{ .Values.agones.image.processor.name}}:{{ default .Values.agones.image.tag .Values.agones.image.processor.tag }}"
        imagePullPolicy: {{ .Values.agones.image.processor.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        env:
        - name: LOG_LEVEL
          value: {{ .Values.agones.allocator.processor.logLevel | quote }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if gt (int .Values.agones.allocator.processor.replicas) 1 }}
        - name: LEADER_ELECTION
          value: "true"
        - name: LEASE_DURATION
          value: {{ .Values.agones.allocator.processor.leaderElection.leaseDuration | default "15s" | quote }}
        - name: RENEW_DEADLINE
          value: {{ .Values.agones.allocator.processor.leaderElection.renewDeadline | default "10s" | quote }}
        - name: RETRY_PERIOD
          value: {{ .Values.agones.allocator.processor.leaderElection.retryPeriod | default "2s" | quote }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: {{ .Values.agones.allocator.processor.healthCheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.agones.allocator.processor.healthCheck.periodSeconds }}
          failureThreshold: {{ .Values.agones.allocator.processor.healthCheck.failureThreshold }}
          timeoutSeconds: {{ .Values.agones.allocator.processor.healthCheck.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: {{ .Values.agones.allocator.processor.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.agones.allocator.processor.readiness.periodSeconds }}
          failureThreshold: {{ .Values.agones.allocator.processor.readiness.failureThreshold }}
        ports:
        - name: http
          containerPort: {{ .Values.agones.allocator.processor.http.port }}
        resources:
{{- if .Values.agones.allocator.processor.resources }}
{{ toYaml .Values.agones.allocator.processor.resources | indent 10 }}
{{- else}}
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 500m
            memory: 256Mi
{{- end }}
{{- if .Values.agones.image.processor.pullSecret }}
      imagePullSecrets:
        - name: {{.Values.agones.image.processor.pullSecret}}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: agones-processor
  namespace: {{ .Release.Namespace }}
  labels:
    agones.dev/role: processor
    app: {{ template "agones.name" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  clusterIP: None
  selector:
    agones.dev/role: processor
    app: {{ template "agones.name" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  ports:
    - port: {{ .Values.agones.allocator.processor.http.port }}
      name: http
      targetPort: {{ .Values.agones.allocator.processor.http.port }}
{{- end }}