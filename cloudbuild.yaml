---
# Copyright 2017 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Google Cloud Builder CI configuration
#
steps:
  #
  # Cancel the previous build for the same branch
  #
  - name: gcr.io/cloud-builders/gcloud-slim:latest
    id: cancelot
    entrypoint: bash
    args: [./ci/cancelot.sh, --current_build_id, $BUILD_ID]

  #
  # Print Docker version
  #
  - name: gcr.io/cloud-builders/docker:24.0.6
    id: docker-version
    args: [--version]

  #
  # Restore any caches
  #
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: htmltest-restore-cache
    args: [--bucket=gs://$_CACHE_BUCKET, --key=$_HTMLTEST_CACHE_KEY]
    waitFor: ['-']
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: cpp-sdk-build-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_CPP_SDK_BUILD_CACHE_KEY-$( checksum sdks/cpp/CMakeLists.txt )
    waitFor: ['-']
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: cpp-sdk-conformance-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_CPP_SDK_CONFORMANCE_CACHE_KEY-$( checksum sdks/cpp/CMakeLists.txt )
    waitFor: ['-']
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: rust-sdk-build-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_RUST_SDK_BUILD_CACHE_KEY-$( checksum test/sdk/rust/Cargo.toml )
    waitFor: ['-']

  #
  # Creates the initial make + docker build platform
  #
  - name: ubuntu
    args:
      - bash
      - -c
      - "echo 'FROM gcr.io/cloud-builders/docker:24.0.6\nRUN apt-get install make\nENTRYPOINT\
        \ [\"/usr/bin/make\"]' > Dockerfile.build"
    waitFor: ['-']
  - name: gcr.io/cloud-builders/docker:24.0.6
    id: build-make-docker
    args: [build, -f, Dockerfile.build, -t, make-docker, .]  # we need docker and make to run everything.

  #
  # pull the main build image if it exists
  #
  - name: make-docker
    id: pull-build-image
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [pull-build-image]
    waitFor:
      - build-make-docker

  #
  # pull the sdk base image, if it exists
  #
  - name: make-docker
    id: pull-build-sdk-base-image
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [pull-build-sdk-base-image]
    waitFor:
      - build-make-docker

  #
  # Ensure that there is the sdk base image, so that both tests
  # and build can use them
  #
  - name: make-docker
    id: ensure-build-sdk-image-base
    waitFor: [pull-build-sdk-base-image]
    dir: build
    args: [ensure-build-sdk-image-base]

  #
  # Preventing SDKs failure in CI
  #
  - name: make-docker
    id: test-gen-all-sdk-grpc
    waitFor: [ensure-build-sdk-image-base]
    dir: build
    args: [test-gen-all-sdk-grpc]

  #
  # Preventing Broken PR Merges in CI
  #
  - name: make-docker
    id: test-gen-crd-code
    waitFor: [pull-build-image]
    dir: build
    args: [test-gen-crd-code]

  #
  # Runs the linter -- but also builds the build image, if not able to download
  #
  - name: make-docker
    id: lint
    waitFor:
      - pull-build-image
      - test-gen-crd-code
      - test-gen-all-sdk-grpc
    dir: build
    args: [lint]  # pull the build image if it exists

  #
  # Push the build image, can run while we do other things.
  #
  - name: make-docker
    waitFor: [lint]
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [push-build-image]  # push the build image (which won't do anything if it's already there)

  #
  # Push the sdk base build image, which can also run while we do other things
  #
  - name: make-docker
    waitFor: [ensure-build-sdk-image-base]
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [push-build-sdk-base-image]

  #
  # Build all the images and sdks, and push them up to the repository
  #
  - name: make-docker
    id: build-images
    waitFor: [lint]
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [-j, '4', build-images]
  - name: make-docker
    id: push-images
    waitFor: [build-images]
    dir: build
    env: ['REGISTRY=${_REGISTRY}']
    args: [-j, '4', push]
  - name: make-docker
    id: build-sdks
    waitFor:
      - lint
      - cpp-sdk-build-restore-cache
      - ensure-build-sdk-image-base
    dir: build
    args: [-j, '4', --output-sync=recurse, build-sdks]

  #
  # Run the all the automated tests (except e2e) in parallel
  #
  - name: make-docker
    id: tests
    waitFor:
      - lint
      - ensure-build-sdk-image-base
      - htmltest-restore-cache
      - build-sdks
    dir: build
    args: [-j, '5', --output-sync=target, test]

  #
  # Site preview
  #
  - name: make-docker  # build a preview of the website
    id: site-static
    waitFor: [tests]
    dir: build
    args: [site-static-preview, site-gen-app-yaml, SERVICE=preview]
  # deploy the preview of the website; # don't promote, as it can cause failures
  # when two deploys try and promote at the same time.
  - name: gcr.io/cloud-builders/gcloud
    id: deploy-site-static
    waitFor: [site-static]
    dir: site
    args: [app, deploy, .app.yaml, --no-promote, --version=$SHORT_SHA]
    env:
      - GOPATH=/workspace/go
      - GO111MODULE=on

  #
  # End to end tests
  #

  # wait for us to be the oldest ongoing build before we run e2es
  - name: gcr.io/cloud-builders/gcloud
    id: e2e-wait-to-become-leader
    waitFor: [push-images]
    script: |
      #!/usr/bin/env bash
      true
    timeout: 10800s  # 3h - if you change this, change the global timeout as well
    env:
      - CLOUDSDK_CORE_PROJECT=$PROJECT_ID
      - BUILD_ID=$BUILD_ID
      - TRIGGER_NAME=$TRIGGER_NAME

  # cancel all the orphan e2e test cloud builds, fail to cancel any of the build will fail this whole build
  - name: gcr.io/cloud-builders/gcloud
    id: cancel-orphan-e2e-tests
    waitFor: [e2e-wait-to-become-leader]
    script: |
      #!/usr/bin/env bash
      true

  # kick off the child e2e test cloud builds in parallel, fail this build if any of the child build fails
  - name: gcr.io/cloud-builders/gcloud
    id: submit-e2e-test-cloud-build
    entrypoint: bash
    args:
      - -c
      - |
        true
    waitFor:
      - cancel-orphan-e2e-tests

  #
  # Zip up artifacts and push to storage
  #
  - name: gcr.io/cloud-builders/gsutil
    waitFor: [build-sdks, tests]
    dir: sdks/cpp/.archives
    args: [-m, cp, '*.tar.gz', gs://agones-artifacts/cpp-sdk]
  - name: gcr.io/cloud-builders/gsutil
    waitFor: [build-images, tests]
    dir: cmd/sdk-server/bin
    args: [-m, cp, '*.zip', gs://agones-artifacts/sdk-server]

  #
  # Cleanup services "preview", "development", "default"
  #
  - name: gcr.io/cloud-builders/gcloud
    id: cleanup-services
    waitFor: [e2e-wait-to-become-leader]
    allowFailure: true
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        set -o pipefail
        for service in preview development default; do
          echo "Cleaning up $service service..."
          gcloud app versions list --service=$service --filter="traffic_split<1" --sort-by=~last_deployed_time.datetime --format="table[no-heading](version.id)" | tail -n +50 | xargs --no-run-if-empty gcloud app versions delete --service=$service --quiet
        done

substitutions:
  _CACHE_BUCKET: agones-build-cache
  _HTMLTEST_CACHE_KEY: htmltest-0.10.1
  _CPP_SDK_BUILD_CACHE_KEY: cpp-sdk-build
  _CPP_SDK_CONFORMANCE_CACHE_KEY: cpp-sdk-conformance
  _RUST_SDK_BUILD_CACHE_KEY: rust-sdk-build
  _REGISTRY: us-docker.pkg.dev/${PROJECT_ID}/ci
tags: [ci, 'commit-${COMMIT_SHA}']
timeout: 18000s  # 5h: 3h (e2e-wait-to-become-leader) + 1.5h (e2e timeout) + 0.5h (everything else)
queueTtl: 259200s  # 72h
images:
  - ${_REGISTRY}/agones-controller
  - ${_REGISTRY}/agones-extensions
  - ${_REGISTRY}/agones-sdk
  - ${_REGISTRY}/agones-ping
  - ${_REGISTRY}/agones-allocator
logsBucket: gs://agones-build-logs
options:
  machineType: E2_HIGHCPU_32
  dynamic_substitutions: true
