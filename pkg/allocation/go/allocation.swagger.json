{
  "swagger": "2.0",
  "info": {
    "title": "proto/allocation/allocation.proto",
    "version": "version not set"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/gameserverallocation": {
      "post": {
        "operationId": "Allocate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/allocationAllocationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/allocationAllocationRequest"
            }
          }
        ],
        "tags": [
          "AllocationService"
        ]
      }
    }
  },
  "definitions": {
    "AllocationRequestSchedulingStrategy": {
      "type": "string",
      "enum": [
        "Packed",
        "Distributed"
      ],
      "default": "Packed"
    },
    "AllocationResponseGameServerStatusPort": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The gameserver port info that is allocated."
    },
    "GameServerSelectorGameServerState": {
      "type": "string",
      "enum": [
        "READY",
        "ALLOCATED"
      ],
      "default": "READY"
    },
    "allocationAllocationRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "The k8s namespace that is hosting the targeted fleet of gameservers to be allocated"
        },
        "multiClusterSetting": {
          "$ref": "#/definitions/allocationMultiClusterSetting",
          "description": "If specified, multi-cluster policies are applied. Otherwise, allocation will happen locally."
        },
        "requiredGameServerSelector": {
          "$ref": "#/definitions/allocationGameServerSelector",
          "description": "The required allocation. Defaults to all GameServers."
        },
        "preferredGameServerSelectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/allocationGameServerSelector"
          },
          "description": "The ordered list of preferred allocations out of the `required` set.\nIf the first selector is not matched, the selection attempts the second selector, and so on."
        },
        "scheduling": {
          "$ref": "#/definitions/AllocationRequestSchedulingStrategy",
          "description": "Scheduling strategy. Defaults to \"Packed\"."
        },
        "metaPatch": {
          "$ref": "#/definitions/allocationMetaPatch",
          "title": "Deprecated: Please use metadata instead. This field is ignored if the\nmetadata field is set"
        },
        "metadata": {
          "$ref": "#/definitions/allocationMetaPatch",
          "title": "Metadata is optional custom metadata that is added to the game server at\nallocation. You can use this to tell the server necessary session data"
        }
      }
    },
    "allocationAllocationResponse": {
      "type": "object",
      "properties": {
        "gameServerName": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationResponseGameServerStatusPort"
          }
        },
        "address": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        }
      }
    },
    "allocationGameServerSelector": {
      "type": "object",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels to match."
        },
        "gameServerState": {
          "$ref": "#/definitions/GameServerSelectorGameServerState"
        },
        "players": {
          "$ref": "#/definitions/allocationPlayerSelector"
        }
      },
      "description": "GameServerSelector used for finding a GameServer with matching filters."
    },
    "allocationLabelSelector": {
      "type": "object",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels to match."
        }
      },
      "description": "LabelSelector used for finding a GameServer with matching labels."
    },
    "allocationMetaPatch": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "MetaPatch is the metadata used to patch the GameServer metadata on allocation"
    },
    "allocationMultiClusterSetting": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set to true, multi-cluster allocation is enabled."
        },
        "policySelector": {
          "$ref": "#/definitions/allocationLabelSelector",
          "description": "Selects multi-cluster allocation policies to apply. If not specified, all multi-cluster allocation policies are to be applied."
        }
      },
      "description": "Specifies settings for multi-cluster allocation."
    },
    "allocationPlayerSelector": {
      "type": "object",
      "properties": {
        "minAvailable": {
          "type": "string",
          "format": "uint64"
        },
        "maxAvailable": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "PlayerSelector is filter for player capacity values.\nminAvailable should always be less or equal to maxAvailable."
    }
  }
}
