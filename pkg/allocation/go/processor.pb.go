// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Copyright 2025 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v6.30.0
// source: proto/allocation/processor.proto

package allocation

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The ProcessorMessage is used to send and receive messages between the client and server.
type ProcessorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client ID is used to identify the client that is sending the message.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The payload is a oneof field that can contain either a PullRequest, Batch, or BatchResponse.
	//
	// Types that are assignable to Payload:
	//
	//	*ProcessorMessage_Pull
	//	*ProcessorMessage_BatchRequest
	//	*ProcessorMessage_BatchResponse
	Payload isProcessorMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ProcessorMessage) Reset() {
	*x = ProcessorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_allocation_processor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorMessage) ProtoMessage() {}

func (x *ProcessorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_allocation_processor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorMessage.ProtoReflect.Descriptor instead.
func (*ProcessorMessage) Descriptor() ([]byte, []int) {
	return file_proto_allocation_processor_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessorMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (m *ProcessorMessage) GetPayload() isProcessorMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ProcessorMessage) GetPull() *PullRequest {
	if x, ok := x.GetPayload().(*ProcessorMessage_Pull); ok {
		return x.Pull
	}
	return nil
}

func (x *ProcessorMessage) GetBatchRequest() *BatchRequest {
	if x, ok := x.GetPayload().(*ProcessorMessage_BatchRequest); ok {
		return x.BatchRequest
	}
	return nil
}

func (x *ProcessorMessage) GetBatchResponse() *BatchResponse {
	if x, ok := x.GetPayload().(*ProcessorMessage_BatchResponse); ok {
		return x.BatchResponse
	}
	return nil
}

type isProcessorMessage_Payload interface {
	isProcessorMessage_Payload()
}

type ProcessorMessage_Pull struct {
	// A PullRequest is used to request a batch of allocation requests.
	Pull *PullRequest `protobuf:"bytes,2,opt,name=pull,proto3,oneof"`
}

type ProcessorMessage_BatchRequest struct {
	// A BatchRequest is used to send a batch of allocation requests.
	BatchRequest *BatchRequest `protobuf:"bytes,3,opt,name=batch_request,json=batchRequest,proto3,oneof"`
}

type ProcessorMessage_BatchResponse struct {
	// A BatchResponse is used to send a response to a batch of allocation requests.
	BatchResponse *BatchResponse `protobuf:"bytes,4,opt,name=batch_response,json=batchResponse,proto3,oneof"`
}

func (*ProcessorMessage_Pull) isProcessorMessage_Payload() {}

func (*ProcessorMessage_BatchRequest) isProcessorMessage_Payload() {}

func (*ProcessorMessage_BatchResponse) isProcessorMessage_Payload() {}

// A PullRequest is used to request a batch of allocation requests.
type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_allocation_processor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_allocation_processor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_proto_allocation_processor_proto_rawDescGZIP(), []int{1}
}

func (x *PullRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A Batch is used to send a batch of allocation requests.
type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requests is a repeated field of AllocationRequest messages.
	Requests []*AllocationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_allocation_processor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_allocation_processor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_allocation_processor_proto_rawDescGZIP(), []int{2}
}

func (x *BatchRequest) GetRequests() []*AllocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// A BatchResponse is used to send a response to a batch of allocation requests.
type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The responses is a repeated field of AllocationResponse messages.
	Responses []*AllocationResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	// The errors is a repeated field of error messages.
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_allocation_processor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_allocation_processor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_allocation_processor_proto_rawDescGZIP(), []int{3}
}

func (x *BatchResponse) GetResponses() []*AllocationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_proto_allocation_processor_proto protoreflect.FileDescriptor

var file_proto_allocation_processor_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x21,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75,
	0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x0c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0x5c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_allocation_processor_proto_rawDescOnce sync.Once
	file_proto_allocation_processor_proto_rawDescData = file_proto_allocation_processor_proto_rawDesc
)

func file_proto_allocation_processor_proto_rawDescGZIP() []byte {
	file_proto_allocation_processor_proto_rawDescOnce.Do(func() {
		file_proto_allocation_processor_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_allocation_processor_proto_rawDescData)
	})
	return file_proto_allocation_processor_proto_rawDescData
}

var file_proto_allocation_processor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_allocation_processor_proto_goTypes = []interface{}{
	(*ProcessorMessage)(nil),   // 0: allocation.ProcessorMessage
	(*PullRequest)(nil),        // 1: allocation.PullRequest
	(*BatchRequest)(nil),       // 2: allocation.BatchRequest
	(*BatchResponse)(nil),      // 3: allocation.BatchResponse
	(*AllocationRequest)(nil),  // 4: allocation.AllocationRequest
	(*AllocationResponse)(nil), // 5: allocation.AllocationResponse
}
var file_proto_allocation_processor_proto_depIdxs = []int32{
	1, // 0: allocation.ProcessorMessage.pull:type_name -> allocation.PullRequest
	2, // 1: allocation.ProcessorMessage.batch_request:type_name -> allocation.BatchRequest
	3, // 2: allocation.ProcessorMessage.batch_response:type_name -> allocation.BatchResponse
	4, // 3: allocation.BatchRequest.requests:type_name -> allocation.AllocationRequest
	5, // 4: allocation.BatchResponse.responses:type_name -> allocation.AllocationResponse
	0, // 5: allocation.Processor.StreamBatches:input_type -> allocation.ProcessorMessage
	0, // 6: allocation.Processor.StreamBatches:output_type -> allocation.ProcessorMessage
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_allocation_processor_proto_init() }
func file_proto_allocation_processor_proto_init() {
	if File_proto_allocation_processor_proto != nil {
		return
	}
	file_proto_allocation_allocation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_allocation_processor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_allocation_processor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_allocation_processor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_allocation_processor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_allocation_processor_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProcessorMessage_Pull)(nil),
		(*ProcessorMessage_BatchRequest)(nil),
		(*ProcessorMessage_BatchResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_allocation_processor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_allocation_processor_proto_goTypes,
		DependencyIndexes: file_proto_allocation_processor_proto_depIdxs,
		MessageInfos:      file_proto_allocation_processor_proto_msgTypes,
	}.Build()
	File_proto_allocation_processor_proto = out.File
	file_proto_allocation_processor_proto_rawDesc = nil
	file_proto_allocation_processor_proto_goTypes = nil
	file_proto_allocation_processor_proto_depIdxs = nil
}
