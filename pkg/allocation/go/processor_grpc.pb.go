// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.0
// source: proto/allocation/processor.proto

package allocation

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorClient interface {
	// StreamBatches processes a stream of ProcessorMessage requests and returns a stream of ProcessorMessage responses.
	StreamBatches(ctx context.Context, opts ...grpc.CallOption) (Processor_StreamBatchesClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) StreamBatches(ctx context.Context, opts ...grpc.CallOption) (Processor_StreamBatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[0], "/allocation.Processor/StreamBatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorStreamBatchesClient{stream}
	return x, nil
}

type Processor_StreamBatchesClient interface {
	Send(*ProcessorMessage) error
	Recv() (*ProcessorMessage, error)
	grpc.ClientStream
}

type processorStreamBatchesClient struct {
	grpc.ClientStream
}

func (x *processorStreamBatchesClient) Send(m *ProcessorMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorStreamBatchesClient) Recv() (*ProcessorMessage, error) {
	m := new(ProcessorMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
// All implementations should embed UnimplementedProcessorServer
// for forward compatibility
type ProcessorServer interface {
	// StreamBatches processes a stream of ProcessorMessage requests and returns a stream of ProcessorMessage responses.
	StreamBatches(Processor_StreamBatchesServer) error
}

// UnimplementedProcessorServer should be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (UnimplementedProcessorServer) StreamBatches(Processor_StreamBatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBatches not implemented")
}

// UnsafeProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServer will
// result in compilation errors.
type UnsafeProcessorServer interface {
	mustEmbedUnimplementedProcessorServer()
}

func RegisterProcessorServer(s grpc.ServiceRegistrar, srv ProcessorServer) {
	s.RegisterService(&Processor_ServiceDesc, srv)
}

func _Processor_StreamBatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).StreamBatches(&processorStreamBatchesServer{stream})
}

type Processor_StreamBatchesServer interface {
	Send(*ProcessorMessage) error
	Recv() (*ProcessorMessage, error)
	grpc.ServerStream
}

type processorStreamBatchesServer struct {
	grpc.ServerStream
}

func (x *processorStreamBatchesServer) Send(m *ProcessorMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorStreamBatchesServer) Recv() (*ProcessorMessage, error) {
	m := new(ProcessorMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Processor_ServiceDesc is the grpc.ServiceDesc for Processor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBatches",
			Handler:       _Processor_StreamBatches_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/allocation/processor.proto",
}
