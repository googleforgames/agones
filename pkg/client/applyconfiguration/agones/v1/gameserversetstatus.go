// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// GameServerSetStatusApplyConfiguration represents an declarative configuration of the GameServerSetStatus type for use
// with apply.
type GameServerSetStatusApplyConfiguration struct {
	Replicas          *int32                                               `json:"replicas,omitempty"`
	ReadyReplicas     *int32                                               `json:"readyReplicas,omitempty"`
	ReservedReplicas  *int32                                               `json:"reservedReplicas,omitempty"`
	AllocatedReplicas *int32                                               `json:"allocatedReplicas,omitempty"`
	ShutdownReplicas  *int32                                               `json:"shutdownReplicas,omitempty"`
	Players           *AggregatedPlayerStatusApplyConfiguration            `json:"players,omitempty"`
	Counters          map[string]AggregatedCounterStatusApplyConfiguration `json:"counters,omitempty"`
	Lists             map[string]AggregatedListStatusApplyConfiguration    `json:"lists,omitempty"`
}

// GameServerSetStatusApplyConfiguration constructs an declarative configuration of the GameServerSetStatus type for use with
// apply.
func GameServerSetStatus() *GameServerSetStatusApplyConfiguration {
	return &GameServerSetStatusApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithReplicas(value int32) *GameServerSetStatusApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithReadyReplicas sets the ReadyReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadyReplicas field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithReadyReplicas(value int32) *GameServerSetStatusApplyConfiguration {
	b.ReadyReplicas = &value
	return b
}

// WithReservedReplicas sets the ReservedReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReservedReplicas field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithReservedReplicas(value int32) *GameServerSetStatusApplyConfiguration {
	b.ReservedReplicas = &value
	return b
}

// WithAllocatedReplicas sets the AllocatedReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocatedReplicas field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithAllocatedReplicas(value int32) *GameServerSetStatusApplyConfiguration {
	b.AllocatedReplicas = &value
	return b
}

// WithShutdownReplicas sets the ShutdownReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShutdownReplicas field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithShutdownReplicas(value int32) *GameServerSetStatusApplyConfiguration {
	b.ShutdownReplicas = &value
	return b
}

// WithPlayers sets the Players field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Players field is set to the value of the last call.
func (b *GameServerSetStatusApplyConfiguration) WithPlayers(value *AggregatedPlayerStatusApplyConfiguration) *GameServerSetStatusApplyConfiguration {
	b.Players = value
	return b
}

// WithCounters puts the entries into the Counters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Counters field,
// overwriting an existing map entries in Counters field with the same key.
func (b *GameServerSetStatusApplyConfiguration) WithCounters(entries map[string]AggregatedCounterStatusApplyConfiguration) *GameServerSetStatusApplyConfiguration {
	if b.Counters == nil && len(entries) > 0 {
		b.Counters = make(map[string]AggregatedCounterStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Counters[k] = v
	}
	return b
}

// WithLists puts the entries into the Lists field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Lists field,
// overwriting an existing map entries in Lists field with the same key.
func (b *GameServerSetStatusApplyConfiguration) WithLists(entries map[string]AggregatedListStatusApplyConfiguration) *GameServerSetStatusApplyConfiguration {
	if b.Lists == nil && len(entries) > 0 {
		b.Lists = make(map[string]AggregatedListStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Lists[k] = v
	}
	return b
}
