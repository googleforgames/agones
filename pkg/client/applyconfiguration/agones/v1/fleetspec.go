// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apis "agones.dev/agones/pkg/apis"
	appsv1 "k8s.io/api/apps/v1"
)

// FleetSpecApplyConfiguration represents an declarative configuration of the FleetSpec type for use
// with apply.
type FleetSpecApplyConfiguration struct {
	Replicas           *int32                                    `json:"replicas,omitempty"`
	AllocationOverflow *AllocationOverflowApplyConfiguration     `json:"allocationOverflow,omitempty"`
	Strategy           *appsv1.DeploymentStrategy                `json:"strategy,omitempty"`
	Scheduling         *apis.SchedulingStrategy                  `json:"scheduling,omitempty"`
	Priorities         []PriorityApplyConfiguration              `json:"priorities,omitempty"`
	Template           *GameServerTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// FleetSpecApplyConfiguration constructs an declarative configuration of the FleetSpec type for use with
// apply.
func FleetSpec() *FleetSpecApplyConfiguration {
	return &FleetSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *FleetSpecApplyConfiguration) WithReplicas(value int32) *FleetSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAllocationOverflow sets the AllocationOverflow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocationOverflow field is set to the value of the last call.
func (b *FleetSpecApplyConfiguration) WithAllocationOverflow(value *AllocationOverflowApplyConfiguration) *FleetSpecApplyConfiguration {
	b.AllocationOverflow = value
	return b
}

// WithStrategy sets the Strategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Strategy field is set to the value of the last call.
func (b *FleetSpecApplyConfiguration) WithStrategy(value appsv1.DeploymentStrategy) *FleetSpecApplyConfiguration {
	b.Strategy = &value
	return b
}

// WithScheduling sets the Scheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scheduling field is set to the value of the last call.
func (b *FleetSpecApplyConfiguration) WithScheduling(value apis.SchedulingStrategy) *FleetSpecApplyConfiguration {
	b.Scheduling = &value
	return b
}

// WithPriorities adds the given value to the Priorities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Priorities field.
func (b *FleetSpecApplyConfiguration) WithPriorities(values ...*PriorityApplyConfiguration) *FleetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPriorities")
		}
		b.Priorities = append(b.Priorities, *values[i])
	}
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *FleetSpecApplyConfiguration) WithTemplate(value *GameServerTemplateSpecApplyConfiguration) *FleetSpecApplyConfiguration {
	b.Template = value
	return b
}
