// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "agones.dev/agones/pkg/apis/agones/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GameServerStatusApplyConfiguration represents an declarative configuration of the GameServerStatus type for use
// with apply.
type GameServerStatusApplyConfiguration struct {
	State         *v1.GameServerState                        `json:"state,omitempty"`
	Ports         []GameServerStatusPortApplyConfiguration   `json:"ports,omitempty"`
	Address       *string                                    `json:"address,omitempty"`
	Addresses     []corev1.NodeAddress                       `json:"addresses,omitempty"`
	NodeName      *string                                    `json:"nodeName,omitempty"`
	ReservedUntil *metav1.Time                               `json:"reservedUntil,omitempty"`
	Players       *PlayerStatusApplyConfiguration            `json:"players,omitempty"`
	Counters      map[string]CounterStatusApplyConfiguration `json:"counters,omitempty"`
	Lists         map[string]ListStatusApplyConfiguration    `json:"lists,omitempty"`
	Eviction      *EvictionApplyConfiguration                `json:"eviction,omitempty"`
}

// GameServerStatusApplyConfiguration constructs an declarative configuration of the GameServerStatus type for use with
// apply.
func GameServerStatus() *GameServerStatusApplyConfiguration {
	return &GameServerStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithState(value v1.GameServerState) *GameServerStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *GameServerStatusApplyConfiguration) WithPorts(values ...*GameServerStatusPortApplyConfiguration) *GameServerStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithAddress(value string) *GameServerStatusApplyConfiguration {
	b.Address = &value
	return b
}

// WithAddresses adds the given value to the Addresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Addresses field.
func (b *GameServerStatusApplyConfiguration) WithAddresses(values ...corev1.NodeAddress) *GameServerStatusApplyConfiguration {
	for i := range values {
		b.Addresses = append(b.Addresses, values[i])
	}
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithNodeName(value string) *GameServerStatusApplyConfiguration {
	b.NodeName = &value
	return b
}

// WithReservedUntil sets the ReservedUntil field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReservedUntil field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithReservedUntil(value metav1.Time) *GameServerStatusApplyConfiguration {
	b.ReservedUntil = &value
	return b
}

// WithPlayers sets the Players field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Players field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithPlayers(value *PlayerStatusApplyConfiguration) *GameServerStatusApplyConfiguration {
	b.Players = value
	return b
}

// WithCounters puts the entries into the Counters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Counters field,
// overwriting an existing map entries in Counters field with the same key.
func (b *GameServerStatusApplyConfiguration) WithCounters(entries map[string]CounterStatusApplyConfiguration) *GameServerStatusApplyConfiguration {
	if b.Counters == nil && len(entries) > 0 {
		b.Counters = make(map[string]CounterStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Counters[k] = v
	}
	return b
}

// WithLists puts the entries into the Lists field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Lists field,
// overwriting an existing map entries in Lists field with the same key.
func (b *GameServerStatusApplyConfiguration) WithLists(entries map[string]ListStatusApplyConfiguration) *GameServerStatusApplyConfiguration {
	if b.Lists == nil && len(entries) > 0 {
		b.Lists = make(map[string]ListStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Lists[k] = v
	}
	return b
}

// WithEviction sets the Eviction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Eviction field is set to the value of the last call.
func (b *GameServerStatusApplyConfiguration) WithEviction(value *EvictionApplyConfiguration) *GameServerStatusApplyConfiguration {
	b.Eviction = value
	return b
}
