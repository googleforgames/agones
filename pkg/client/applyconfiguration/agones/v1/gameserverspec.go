// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apis "agones.dev/agones/pkg/apis"
	corev1 "k8s.io/api/core/v1"
)

// GameServerSpecApplyConfiguration represents an declarative configuration of the GameServerSpec type for use
// with apply.
type GameServerSpecApplyConfiguration struct {
	Container  *string                                    `json:"container,omitempty"`
	Ports      []GameServerPortApplyConfiguration         `json:"ports,omitempty"`
	Health     *HealthApplyConfiguration                  `json:"health,omitempty"`
	Scheduling *apis.SchedulingStrategy                   `json:"scheduling,omitempty"`
	SdkServer  *SdkServerApplyConfiguration               `json:"sdkServer,omitempty"`
	Template   *corev1.PodTemplateSpec                    `json:"template,omitempty"`
	Players    *PlayersSpecApplyConfiguration             `json:"players,omitempty"`
	Counters   map[string]CounterStatusApplyConfiguration `json:"counters,omitempty"`
	Lists      map[string]ListStatusApplyConfiguration    `json:"lists,omitempty"`
	Eviction   *EvictionApplyConfiguration                `json:"eviction,omitempty"`
}

// GameServerSpecApplyConfiguration constructs an declarative configuration of the GameServerSpec type for use with
// apply.
func GameServerSpec() *GameServerSpecApplyConfiguration {
	return &GameServerSpecApplyConfiguration{}
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithContainer(value string) *GameServerSpecApplyConfiguration {
	b.Container = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *GameServerSpecApplyConfiguration) WithPorts(values ...*GameServerPortApplyConfiguration) *GameServerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithHealth sets the Health field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Health field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithHealth(value *HealthApplyConfiguration) *GameServerSpecApplyConfiguration {
	b.Health = value
	return b
}

// WithScheduling sets the Scheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scheduling field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithScheduling(value apis.SchedulingStrategy) *GameServerSpecApplyConfiguration {
	b.Scheduling = &value
	return b
}

// WithSdkServer sets the SdkServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SdkServer field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithSdkServer(value *SdkServerApplyConfiguration) *GameServerSpecApplyConfiguration {
	b.SdkServer = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithTemplate(value corev1.PodTemplateSpec) *GameServerSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithPlayers sets the Players field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Players field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithPlayers(value *PlayersSpecApplyConfiguration) *GameServerSpecApplyConfiguration {
	b.Players = value
	return b
}

// WithCounters puts the entries into the Counters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Counters field,
// overwriting an existing map entries in Counters field with the same key.
func (b *GameServerSpecApplyConfiguration) WithCounters(entries map[string]CounterStatusApplyConfiguration) *GameServerSpecApplyConfiguration {
	if b.Counters == nil && len(entries) > 0 {
		b.Counters = make(map[string]CounterStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Counters[k] = v
	}
	return b
}

// WithLists puts the entries into the Lists field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Lists field,
// overwriting an existing map entries in Lists field with the same key.
func (b *GameServerSpecApplyConfiguration) WithLists(entries map[string]ListStatusApplyConfiguration) *GameServerSpecApplyConfiguration {
	if b.Lists == nil && len(entries) > 0 {
		b.Lists = make(map[string]ListStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Lists[k] = v
	}
	return b
}

// WithEviction sets the Eviction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Eviction field is set to the value of the last call.
func (b *GameServerSpecApplyConfiguration) WithEviction(value *EvictionApplyConfiguration) *GameServerSpecApplyConfiguration {
	b.Eviction = value
	return b
}
