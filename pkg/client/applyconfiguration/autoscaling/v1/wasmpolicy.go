// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// WasmPolicyApplyConfiguration represents a declarative configuration of the WasmPolicy type for use
// with apply.
type WasmPolicyApplyConfiguration struct {
	Function *string                     `json:"function,omitempty"`
	Config   map[string]string           `json:"config,omitempty"`
	From     *WasmFromApplyConfiguration `json:"from,omitempty"`
	Hash     *string                     `json:"hash,omitempty"`
}

// WasmPolicyApplyConfiguration constructs a declarative configuration of the WasmPolicy type for use with
// apply.
func WasmPolicy() *WasmPolicyApplyConfiguration {
	return &WasmPolicyApplyConfiguration{}
}

// WithFunction sets the Function field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Function field is set to the value of the last call.
func (b *WasmPolicyApplyConfiguration) WithFunction(value string) *WasmPolicyApplyConfiguration {
	b.Function = &value
	return b
}

// WithConfig puts the entries into the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Config field,
// overwriting an existing map entries in Config field with the same key.
func (b *WasmPolicyApplyConfiguration) WithConfig(entries map[string]string) *WasmPolicyApplyConfiguration {
	if b.Config == nil && len(entries) > 0 {
		b.Config = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Config[k] = v
	}
	return b
}

// WithFrom sets the From field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the From field is set to the value of the last call.
func (b *WasmPolicyApplyConfiguration) WithFrom(value *WasmFromApplyConfiguration) *WasmPolicyApplyConfiguration {
	b.From = value
	return b
}

// WithHash sets the Hash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hash field is set to the value of the last call.
func (b *WasmPolicyApplyConfiguration) WithHash(value string) *WasmPolicyApplyConfiguration {
	b.Hash = &value
	return b
}
