// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ChainPolicyApplyConfiguration represents an declarative configuration of the ChainPolicy type for use
// with apply.
type ChainPolicyApplyConfiguration struct {
	Items []ChainEntryApplyConfiguration `json:"items,omitempty"`
}

// ChainPolicyApplyConfiguration constructs an declarative configuration of the ChainPolicy type for use with
// apply.
func ChainPolicy() *ChainPolicyApplyConfiguration {
	return &ChainPolicyApplyConfiguration{}
}

// WithItems adds the given value to the Items field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Items field.
func (b *ChainPolicyApplyConfiguration) WithItems(values ...*ChainEntryApplyConfiguration) *ChainPolicyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithItems")
		}
		b.Items = append(b.Items, *values[i])
	}
	return b
}
