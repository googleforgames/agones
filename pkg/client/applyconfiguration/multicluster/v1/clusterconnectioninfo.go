// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ClusterConnectionInfoApplyConfiguration represents an declarative configuration of the ClusterConnectionInfo type for use
// with apply.
type ClusterConnectionInfoApplyConfiguration struct {
	ClusterName         *string  `json:"clusterName,omitempty"`
	AllocationEndpoints []string `json:"allocationEndpoints,omitempty"`
	SecretName          *string  `json:"secretName,omitempty"`
	Namespace           *string  `json:"namespace,omitempty"`
	ServerCA            []byte   `json:"serverCa,omitempty"`
}

// ClusterConnectionInfoApplyConfiguration constructs an declarative configuration of the ClusterConnectionInfo type for use with
// apply.
func ClusterConnectionInfo() *ClusterConnectionInfoApplyConfiguration {
	return &ClusterConnectionInfoApplyConfiguration{}
}

// WithClusterName sets the ClusterName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterName field is set to the value of the last call.
func (b *ClusterConnectionInfoApplyConfiguration) WithClusterName(value string) *ClusterConnectionInfoApplyConfiguration {
	b.ClusterName = &value
	return b
}

// WithAllocationEndpoints adds the given value to the AllocationEndpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllocationEndpoints field.
func (b *ClusterConnectionInfoApplyConfiguration) WithAllocationEndpoints(values ...string) *ClusterConnectionInfoApplyConfiguration {
	for i := range values {
		b.AllocationEndpoints = append(b.AllocationEndpoints, values[i])
	}
	return b
}

// WithSecretName sets the SecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretName field is set to the value of the last call.
func (b *ClusterConnectionInfoApplyConfiguration) WithSecretName(value string) *ClusterConnectionInfoApplyConfiguration {
	b.SecretName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ClusterConnectionInfoApplyConfiguration) WithNamespace(value string) *ClusterConnectionInfoApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithServerCA adds the given value to the ServerCA field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServerCA field.
func (b *ClusterConnectionInfoApplyConfiguration) WithServerCA(values ...byte) *ClusterConnectionInfoApplyConfiguration {
	for i := range values {
		b.ServerCA = append(b.ServerCA, values[i])
	}
	return b
}
