// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "agones.dev/agones/pkg/apis/multicluster/v1"
	multiclusterv1 "agones.dev/agones/pkg/client/applyconfiguration/multicluster/v1"
	scheme "agones.dev/agones/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// GameServerAllocationPoliciesGetter has a method to return a GameServerAllocationPolicyInterface.
// A group's client should implement this interface.
type GameServerAllocationPoliciesGetter interface {
	GameServerAllocationPolicies(namespace string) GameServerAllocationPolicyInterface
}

// GameServerAllocationPolicyInterface has methods to work with GameServerAllocationPolicy resources.
type GameServerAllocationPolicyInterface interface {
	Create(ctx context.Context, gameServerAllocationPolicy *v1.GameServerAllocationPolicy, opts metav1.CreateOptions) (*v1.GameServerAllocationPolicy, error)
	Update(ctx context.Context, gameServerAllocationPolicy *v1.GameServerAllocationPolicy, opts metav1.UpdateOptions) (*v1.GameServerAllocationPolicy, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.GameServerAllocationPolicy, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.GameServerAllocationPolicyList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.GameServerAllocationPolicy, err error)
	Apply(ctx context.Context, gameServerAllocationPolicy *multiclusterv1.GameServerAllocationPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *v1.GameServerAllocationPolicy, err error)
	GameServerAllocationPolicyExpansion
}

// gameServerAllocationPolicies implements GameServerAllocationPolicyInterface
type gameServerAllocationPolicies struct {
	*gentype.ClientWithListAndApply[*v1.GameServerAllocationPolicy, *v1.GameServerAllocationPolicyList, *multiclusterv1.GameServerAllocationPolicyApplyConfiguration]
}

// newGameServerAllocationPolicies returns a GameServerAllocationPolicies
func newGameServerAllocationPolicies(c *MulticlusterV1Client, namespace string) *gameServerAllocationPolicies {
	return &gameServerAllocationPolicies{
		gentype.NewClientWithListAndApply[*v1.GameServerAllocationPolicy, *v1.GameServerAllocationPolicyList, *multiclusterv1.GameServerAllocationPolicyApplyConfiguration](
			"gameserverallocationpolicies",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.GameServerAllocationPolicy { return &v1.GameServerAllocationPolicy{} },
			func() *v1.GameServerAllocationPolicyList { return &v1.GameServerAllocationPolicyList{} }),
	}
}
