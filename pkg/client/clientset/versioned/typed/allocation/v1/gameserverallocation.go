// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "agones.dev/agones/pkg/apis/allocation/v1"
	scheme "agones.dev/agones/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
)

// GameServerAllocationsGetter has a method to return a GameServerAllocationInterface.
// A group's client should implement this interface.
type GameServerAllocationsGetter interface {
	GameServerAllocations(namespace string) GameServerAllocationInterface
}

// GameServerAllocationInterface has methods to work with GameServerAllocation resources.
type GameServerAllocationInterface interface {
	Create(ctx context.Context, gameServerAllocation *v1.GameServerAllocation, opts metav1.CreateOptions) (*v1.GameServerAllocation, error)
	GameServerAllocationExpansion
}

// gameServerAllocations implements GameServerAllocationInterface
type gameServerAllocations struct {
	*gentype.Client[*v1.GameServerAllocation]
}

// newGameServerAllocations returns a GameServerAllocations
func newGameServerAllocations(c *AllocationV1Client, namespace string) *gameServerAllocations {
	return &gameServerAllocations{
		gentype.NewClient[*v1.GameServerAllocation](
			"gameserverallocations",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.GameServerAllocation { return &v1.GameServerAllocation{} }),
	}
}
