// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "agones.dev/agones/pkg/apis/autoscaling/v1"
	autoscalingv1 "agones.dev/agones/pkg/client/applyconfiguration/autoscaling/v1"
	scheme "agones.dev/agones/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// FleetAutoscalersGetter has a method to return a FleetAutoscalerInterface.
// A group's client should implement this interface.
type FleetAutoscalersGetter interface {
	FleetAutoscalers(namespace string) FleetAutoscalerInterface
}

// FleetAutoscalerInterface has methods to work with FleetAutoscaler resources.
type FleetAutoscalerInterface interface {
	Create(ctx context.Context, fleetAutoscaler *v1.FleetAutoscaler, opts metav1.CreateOptions) (*v1.FleetAutoscaler, error)
	Update(ctx context.Context, fleetAutoscaler *v1.FleetAutoscaler, opts metav1.UpdateOptions) (*v1.FleetAutoscaler, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, fleetAutoscaler *v1.FleetAutoscaler, opts metav1.UpdateOptions) (*v1.FleetAutoscaler, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.FleetAutoscaler, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.FleetAutoscalerList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FleetAutoscaler, err error)
	Apply(ctx context.Context, fleetAutoscaler *autoscalingv1.FleetAutoscalerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FleetAutoscaler, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, fleetAutoscaler *autoscalingv1.FleetAutoscalerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FleetAutoscaler, err error)
	FleetAutoscalerExpansion
}

// fleetAutoscalers implements FleetAutoscalerInterface
type fleetAutoscalers struct {
	*gentype.ClientWithListAndApply[*v1.FleetAutoscaler, *v1.FleetAutoscalerList, *autoscalingv1.FleetAutoscalerApplyConfiguration]
}

// newFleetAutoscalers returns a FleetAutoscalers
func newFleetAutoscalers(c *AutoscalingV1Client, namespace string) *fleetAutoscalers {
	return &fleetAutoscalers{
		gentype.NewClientWithListAndApply[*v1.FleetAutoscaler, *v1.FleetAutoscalerList, *autoscalingv1.FleetAutoscalerApplyConfiguration](
			"fleetautoscalers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.FleetAutoscaler { return &v1.FleetAutoscaler{} },
			func() *v1.FleetAutoscalerList { return &v1.FleetAutoscalerList{} }),
	}
}
