// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "agones.dev/agones/pkg/apis/autoscaling/v1"
	autoscalingv1 "agones.dev/agones/pkg/client/applyconfiguration/autoscaling/v1"
	typedautoscalingv1 "agones.dev/agones/pkg/client/clientset/versioned/typed/autoscaling/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeFleetAutoscalers implements FleetAutoscalerInterface
type fakeFleetAutoscalers struct {
	*gentype.FakeClientWithListAndApply[*v1.FleetAutoscaler, *v1.FleetAutoscalerList, *autoscalingv1.FleetAutoscalerApplyConfiguration]
	Fake *FakeAutoscalingV1
}

func newFakeFleetAutoscalers(fake *FakeAutoscalingV1, namespace string) typedautoscalingv1.FleetAutoscalerInterface {
	return &fakeFleetAutoscalers{
		gentype.NewFakeClientWithListAndApply[*v1.FleetAutoscaler, *v1.FleetAutoscalerList, *autoscalingv1.FleetAutoscalerApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("fleetautoscalers"),
			v1.SchemeGroupVersion.WithKind("FleetAutoscaler"),
			func() *v1.FleetAutoscaler { return &v1.FleetAutoscaler{} },
			func() *v1.FleetAutoscalerList { return &v1.FleetAutoscalerList{} },
			func(dst, src *v1.FleetAutoscalerList) { dst.ListMeta = src.ListMeta },
			func(list *v1.FleetAutoscalerList) []*v1.FleetAutoscaler { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.FleetAutoscalerList, items []*v1.FleetAutoscaler) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
