// Copyright 2024 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "agones.dev/agones/pkg/apis/agones/v1"
	agonesv1 "agones.dev/agones/pkg/client/applyconfiguration/agones/v1"
	scheme "agones.dev/agones/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// GameServersGetter has a method to return a GameServerInterface.
// A group's client should implement this interface.
type GameServersGetter interface {
	GameServers(namespace string) GameServerInterface
}

// GameServerInterface has methods to work with GameServer resources.
type GameServerInterface interface {
	Create(ctx context.Context, gameServer *v1.GameServer, opts metav1.CreateOptions) (*v1.GameServer, error)
	Update(ctx context.Context, gameServer *v1.GameServer, opts metav1.UpdateOptions) (*v1.GameServer, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.GameServer, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.GameServerList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.GameServer, err error)
	Apply(ctx context.Context, gameServer *agonesv1.GameServerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.GameServer, err error)
	GameServerExpansion
}

// gameServers implements GameServerInterface
type gameServers struct {
	*gentype.ClientWithListAndApply[*v1.GameServer, *v1.GameServerList, *agonesv1.GameServerApplyConfiguration]
}

// newGameServers returns a GameServers
func newGameServers(c *AgonesV1Client, namespace string) *gameServers {
	return &gameServers{
		gentype.NewClientWithListAndApply[*v1.GameServer, *v1.GameServerList, *agonesv1.GameServerApplyConfiguration](
			"gameservers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.GameServer { return &v1.GameServer{} },
			func() *v1.GameServerList { return &v1.GameServerList{} }),
	}
}
