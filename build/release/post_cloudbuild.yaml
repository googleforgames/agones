---
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
steps:

  #
  # Clean out the working dir, so we can replace it.
  #
  - name: ubuntu
    script: rm *

  #
  # Shallow clone of Agones/main branch from the main repository
  #
  - name: gcr.io/cloud-builders/git
    id: clone
    args:
      - clone
      - --depth=1
      - --branch=main
      - https://github.com/googleforgames/agones.git
      - .

  #
  # Restore any caches
  #
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: cpp-sdk-build-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_CPP_SDK_BUILD_CACHE_KEY-$( checksum sdks/cpp/cmake/prerequisites.cmake
        )
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: cpp-sdk-conformance-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_CPP_SDK_CONFORMANCE_CACHE_KEY-$( checksum sdks/cpp/cmake/prerequisites.cmake
        )
  - name: us-docker.pkg.dev/$PROJECT_ID/ci/restore_cache
    id: rust-sdk-build-restore-cache
    args:
      - --bucket=gs://$_CACHE_BUCKET
      - --key=$_RUST_SDK_BUILD_CACHE_KEY-$( checksum test/sdk/rust/Cargo.toml )

  #
  # Creates the initial make + docker build platform
  #
  - name: ubuntu
    args:
      - bash
      - -c
      - "echo 'FROM gcr.io/cloud-builders/docker\nRUN apt-get install make\nENTRYPOINT\
        \ [\"/usr/bin/make\"]' > Dockerfile.build"
  - name: gcr.io/cloud-builders/docker
    id: build-make-docker
    args: [build, -f, Dockerfile.build, -t, make-docker, .]

  #
  # Build all the images
  #
  - name: make-docker
    id: build-images
    dir: build
    env:
      - VERSION=${_VERSION}
      - REGISTRY=${_REGISTRY}/release
      - FULL_BUILD=1
    args: [-j, '1', build]

  #
  # push all the images
  #
  - name: make-docker
    id: push-images
    waitFor: [build-images]
    dir: build
    env: ['VERSION=${_VERSION}', 'REGISTRY=${_REGISTRY}/release']
    args: [-j, '1', push]

  #
  # Creating cloud storage bucket
  #
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    args: [-c, gsutil mb $_STORAGE || true]
    id: create-bucket

  #
  # Zip up artifacts and push to cloud storage
  #
  - name: gcr.io/cloud-builders/gsutil
    waitFor: [build-images]
    dir: cmd/sdk-server/bin
    args: [-m, cp, '*.zip', $_STORAGE]
  - name: gcr.io/cloud-builders/gsutil
    waitFor: [build-images]
    dir: sdks/cpp/.archives
    args: [-m, cp, '*.tar.gz', $_STORAGE]
  - name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    waitFor: [build-images]
    dir: .
    args:
      - -c
      - zip -r agones-install-${_VERSION}.zip ./README.md ./install ./LICENSE | gsutil
        -m cp -r agones-install-${_VERSION}.zip $_STORAGE

  #
  # Pushes the current chart version to the helm repository hosted on gcs.
  #
  - name: make-docker
    id: push-chart
    waitFor: [build-images, push-images]
    dir: build
    env: ['VERSION=${_VERSION}', DOCKER_RUN_ARGS=--network=cloudbuild]
    args: [push-chart]
options:
  machineType: E2_HIGHCPU_32
  dynamic_substitutions: true
substitutions:
  _STORAGE: gs://${PROJECT_ID}-agones-releases
  _REGISTRY: us-docker.pkg.dev/${PROJECT_ID}
  _CACHE_BUCKET: agones-build-cache
  _CPP_SDK_BUILD_CACHE_KEY: cpp-sdk-build
  _CPP_SDK_CONFORMANCE_CACHE_KEY: cpp-sdk-conformance
  _RUST_SDK_BUILD_CACHE_KEY: rust-sdk-build
timeout: 7200s
