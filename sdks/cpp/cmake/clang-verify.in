# Copyright 2019 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.15)

option(AGONES_SILENT_OUTPUT "Show only warnings/error messages" OFF)
if (AGONES_SILENT_OUTPUT)
    function(message)
        list(GET ARGV 0 MessageType)
        list(REMOVE_AT ARGV 0)
        if (MessageType STREQUAL FATAL_ERROR OR
            MessageType STREQUAL SEND_ERROR OR
            MessageType STREQUAL WARNING OR
            MessageType STREQUAL AUTHOR_WARNING OR
            NOT ${AGONES_SILENT_OUTPUT}
            )
            _message(${MessageType} "${ARGV}")
        endif()
    endfunction()

    set(CMAKE_INSTALL_MESSAGE NEVER)
    set(CMAKE_VERBOSE_MAKEFILE OFF)
    set_property(GLOBAL PROPERTY RULE_MESSAGES OFF)
    set_property(GLOBAL PROPERTY TARGET_MESSAGES OFF)
endif(AGONES_SILENT_OUTPUT)

set(files @CLANGFORMAT_INPUT@)
set(workingdir @CLANGFORMAT_WORKING_DIR@)
set(root @AGONES_ROOT@)
set(temp @AGONES_TEMP@)

find_package(Git REQUIRED)
find_program(
    CLANG_FORMAT_APP
    NAMES "clang-format"
    DOC "Path to clang-format"
)
if (NOT CLANG_FORMAT_APP)
    message(FATAL_ERROR "Could not find clang-format")
endif()

file(MAKE_DIRECTORY ${temp})
foreach(source_file ${files})
    file(COPY ${source_file} DESTINATION ${temp})
    file(RELATIVE_PATH source_relative ${root} ${source_file})
    get_filename_component(filename ${source_file} NAME ABSOLUTE)
    get_filename_component(source_file_temp "${temp}/${filename}" ABSOLUTE)

    execute_process(
        COMMAND ${CLANG_FORMAT_APP} -i --style=file --fallback-style=Google ${source_file_temp}
        WORKING_DIRECTORY ${workingdir}
    )
    execute_process(
        COMMAND ${GIT_EXECUTABLE} diff --exit-code --quiet --no-index "${source_file}" "${source_file_temp}"
        WORKING_DIRECTORY ${root}
        RESULT_VARIABLE result
    )
    
    file(REMOVE ${source_file_temp})
    if (NOT ${result} EQUAL 0)
        message(FATAL_ERROR "clang-format code style check failed for: ${source_relative}")
    endif()
endforeach()
