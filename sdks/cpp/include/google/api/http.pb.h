// Copyright 2023 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/http.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fhttp_2eproto AGONES_EXPORT

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct AGONES_EXPORT TableStruct_google_2fapi_2fhttp_2eproto {
  static const ::uint32_t offsets[];
};
AGONES_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_google_2fapi_2fhttp_2eproto;
namespace google {
namespace api {
class CustomHttpPattern;
struct CustomHttpPatternDefaultTypeInternal;
AGONES_EXPORT extern CustomHttpPatternDefaultTypeInternal _CustomHttpPattern_default_instance_;
class Http;
struct HttpDefaultTypeInternal;
AGONES_EXPORT extern HttpDefaultTypeInternal _Http_default_instance_;
class HttpRule;
struct HttpRuleDefaultTypeInternal;
AGONES_EXPORT extern HttpRuleDefaultTypeInternal _HttpRule_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template <>
AGONES_EXPORT ::google::api::CustomHttpPattern* Arena::CreateMaybeMessage<::google::api::CustomHttpPattern>(Arena*);
template <>
AGONES_EXPORT ::google::api::Http* Arena::CreateMaybeMessage<::google::api::Http>(Arena*);
template <>
AGONES_EXPORT ::google::api::HttpRule* Arena::CreateMaybeMessage<::google::api::HttpRule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace google {
namespace api {

// ===================================================================


// -------------------------------------------------------------------

class AGONES_EXPORT Http final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Http) */ {
 public:
  inline Http() : Http(nullptr) {}
  ~Http() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Http(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Http(const Http& from);
  Http(Http&& from) noexcept
    : Http() {
    *this = ::std::move(from);
  }

  inline Http& operator=(const Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline Http& operator=(Http&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Http& default_instance() {
    return *internal_default_instance();
  }
  static inline const Http* internal_default_instance() {
    return reinterpret_cast<const Http*>(
               &_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Http& a, Http& b) {
    a.Swap(&b);
  }
  inline void Swap(Http* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Http* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Http>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Http& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Http& from) {
    Http::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Http* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.api.Http";
  }
  protected:
  explicit Http(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
    kFullyDecodeReservedExpansionFieldNumber = 2,
  };
  // repeated .google.api.HttpRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::google::api::HttpRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
      mutable_rules();
  private:
  const ::google::api::HttpRule& _internal_rules(int index) const;
  ::google::api::HttpRule* _internal_add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>& _internal_rules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>* _internal_mutable_rules();
  public:
  const ::google::api::HttpRule& rules(int index) const;
  ::google::api::HttpRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
      rules() const;
  // bool fully_decode_reserved_expansion = 2;
  void clear_fully_decode_reserved_expansion() ;
  bool fully_decode_reserved_expansion() const;
  void set_fully_decode_reserved_expansion(bool value);

  private:
  bool _internal_fully_decode_reserved_expansion() const;
  void _internal_set_fully_decode_reserved_expansion(bool value);

  public:
  // @@protoc_insertion_point(class_scope:google.api.Http)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule > rules_;
    bool fully_decode_reserved_expansion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};// -------------------------------------------------------------------

class AGONES_EXPORT HttpRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.HttpRule) */ {
 public:
  inline HttpRule() : HttpRule(nullptr) {}
  ~HttpRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpRule(const HttpRule& from);
  HttpRule(HttpRule&& from) noexcept
    : HttpRule() {
    *this = ::std::move(from);
  }

  inline HttpRule& operator=(const HttpRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpRule& operator=(HttpRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpRule& default_instance() {
    return *internal_default_instance();
  }
  enum PatternCase {
    kGet = 2,
    kPut = 3,
    kPost = 4,
    kDelete = 5,
    kPatch = 6,
    kCustom = 8,
    PATTERN_NOT_SET = 0,
  };

  static inline const HttpRule* internal_default_instance() {
    return reinterpret_cast<const HttpRule*>(
               &_HttpRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HttpRule& a, HttpRule& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HttpRule& from) {
    HttpRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.api.HttpRule";
  }
  protected:
  explicit HttpRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalBindingsFieldNumber = 11,
    kSelectorFieldNumber = 1,
    kBodyFieldNumber = 7,
    kResponseBodyFieldNumber = 12,
    kGetFieldNumber = 2,
    kPutFieldNumber = 3,
    kPostFieldNumber = 4,
    kDeleteFieldNumber = 5,
    kPatchFieldNumber = 6,
    kCustomFieldNumber = 8,
  };
  // repeated .google.api.HttpRule additional_bindings = 11;
  int additional_bindings_size() const;
  private:
  int _internal_additional_bindings_size() const;

  public:
  void clear_additional_bindings() ;
  ::google::api::HttpRule* mutable_additional_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
      mutable_additional_bindings();
  private:
  const ::google::api::HttpRule& _internal_additional_bindings(int index) const;
  ::google::api::HttpRule* _internal_add_additional_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>& _internal_additional_bindings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>* _internal_mutable_additional_bindings();
  public:
  const ::google::api::HttpRule& additional_bindings(int index) const;
  ::google::api::HttpRule* add_additional_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
      additional_bindings() const;
  // string selector = 1;
  void clear_selector() ;
  const std::string& selector() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_selector(Arg_&& arg, Args_... args);
  std::string* mutable_selector();
  PROTOBUF_NODISCARD std::string* release_selector();
  void set_allocated_selector(std::string* ptr);

  private:
  const std::string& _internal_selector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selector(
      const std::string& value);
  std::string* _internal_mutable_selector();

  public:
  // string body = 7;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // string response_body = 12;
  void clear_response_body() ;
  const std::string& response_body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_body(Arg_&& arg, Args_... args);
  std::string* mutable_response_body();
  PROTOBUF_NODISCARD std::string* release_response_body();
  void set_allocated_response_body(std::string* ptr);

  private:
  const std::string& _internal_response_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_body(
      const std::string& value);
  std::string* _internal_mutable_response_body();

  public:
  // string get = 2;
  bool has_get() const;
  void clear_get() ;
  const std::string& get() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_get(Arg_&& arg, Args_... args);
  std::string* mutable_get();
  PROTOBUF_NODISCARD std::string* release_get();
  void set_allocated_get(std::string* ptr);

  private:
  const std::string& _internal_get() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_get(
      const std::string& value);
  std::string* _internal_mutable_get();

  public:
  // string put = 3;
  bool has_put() const;
  void clear_put() ;
  const std::string& put() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_put(Arg_&& arg, Args_... args);
  std::string* mutable_put();
  PROTOBUF_NODISCARD std::string* release_put();
  void set_allocated_put(std::string* ptr);

  private:
  const std::string& _internal_put() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_put(
      const std::string& value);
  std::string* _internal_mutable_put();

  public:
  // string post = 4;
  bool has_post() const;
  void clear_post() ;
  const std::string& post() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_post(Arg_&& arg, Args_... args);
  std::string* mutable_post();
  PROTOBUF_NODISCARD std::string* release_post();
  void set_allocated_post(std::string* ptr);

  private:
  const std::string& _internal_post() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_post(
      const std::string& value);
  std::string* _internal_mutable_post();

  public:
  // string delete = 5;
  bool has_delete_() const;
  void clear_delete_() ;
  const std::string& delete_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delete_(Arg_&& arg, Args_... args);
  std::string* mutable_delete_();
  PROTOBUF_NODISCARD std::string* release_delete_();
  void set_allocated_delete_(std::string* ptr);

  private:
  const std::string& _internal_delete_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delete_(
      const std::string& value);
  std::string* _internal_mutable_delete_();

  public:
  // string patch = 6;
  bool has_patch() const;
  void clear_patch() ;
  const std::string& patch() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_patch(Arg_&& arg, Args_... args);
  std::string* mutable_patch();
  PROTOBUF_NODISCARD std::string* release_patch();
  void set_allocated_patch(std::string* ptr);

  private:
  const std::string& _internal_patch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patch(
      const std::string& value);
  std::string* _internal_mutable_patch();

  public:
  // .google.api.CustomHttpPattern custom = 8;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;

  public:
  void clear_custom() ;
  const ::google::api::CustomHttpPattern& custom() const;
  PROTOBUF_NODISCARD ::google::api::CustomHttpPattern* release_custom();
  ::google::api::CustomHttpPattern* mutable_custom();
  void set_allocated_custom(::google::api::CustomHttpPattern* custom);
  private:
  const ::google::api::CustomHttpPattern& _internal_custom() const;
  ::google::api::CustomHttpPattern* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::google::api::CustomHttpPattern* custom);
  ::google::api::CustomHttpPattern* unsafe_arena_release_custom();
  void clear_pattern();
  PatternCase pattern_case() const;
  // @@protoc_insertion_point(class_scope:google.api.HttpRule)
 private:
  class _Internal;
  void set_has_get();
  void set_has_put();
  void set_has_post();
  void set_has_delete_();
  void set_has_patch();
  void set_has_custom();

  inline bool has_pattern() const;
  inline void clear_has_pattern();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule > additional_bindings_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_body_;
    union PatternUnion {
      constexpr PatternUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr get_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr put_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delete__;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patch_;
      ::google::api::CustomHttpPattern* custom_;
    } pattern_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};// -------------------------------------------------------------------

class AGONES_EXPORT CustomHttpPattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.CustomHttpPattern) */ {
 public:
  inline CustomHttpPattern() : CustomHttpPattern(nullptr) {}
  ~CustomHttpPattern() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CustomHttpPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomHttpPattern(const CustomHttpPattern& from);
  CustomHttpPattern(CustomHttpPattern&& from) noexcept
    : CustomHttpPattern() {
    *this = ::std::move(from);
  }

  inline CustomHttpPattern& operator=(const CustomHttpPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomHttpPattern& operator=(CustomHttpPattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomHttpPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomHttpPattern* internal_default_instance() {
    return reinterpret_cast<const CustomHttpPattern*>(
               &_CustomHttpPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomHttpPattern& a, CustomHttpPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomHttpPattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomHttpPattern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomHttpPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomHttpPattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomHttpPattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomHttpPattern& from) {
    CustomHttpPattern::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomHttpPattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.api.CustomHttpPattern";
  }
  protected:
  explicit CustomHttpPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string kind = 1;
  void clear_kind() ;
  const std::string& kind() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kind(Arg_&& arg, Args_... args);
  std::string* mutable_kind();
  PROTOBUF_NODISCARD std::string* release_kind();
  void set_allocated_kind(std::string* ptr);

  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(
      const std::string& value);
  std::string* _internal_mutable_kind();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:google.api.CustomHttpPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Http

// repeated .google.api.HttpRule rules = 1;
inline int Http::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int Http::rules_size() const {
  return _internal_rules_size();
}
inline void Http::clear_rules() {
  _internal_mutable_rules()->Clear();
}
inline ::google::api::HttpRule* Http::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Http.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
Http::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Http.rules)
  return _internal_mutable_rules();
}
inline const ::google::api::HttpRule& Http::_internal_rules(int index) const {
  return _internal_rules().Get(index);
}
inline const ::google::api::HttpRule& Http::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Http.rules)
  return _internal_rules(index);
}
inline ::google::api::HttpRule* Http::_internal_add_rules() {
  return _internal_mutable_rules()->Add();
}
inline ::google::api::HttpRule* Http::add_rules() {
  ::google::api::HttpRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:google.api.Http.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
Http::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Http.rules)
  return _internal_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>&
Http::_internal_rules() const {
  return _impl_.rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>*
Http::_internal_mutable_rules() {
  return &_impl_.rules_;
}

// bool fully_decode_reserved_expansion = 2;
inline void Http::clear_fully_decode_reserved_expansion() {
  _impl_.fully_decode_reserved_expansion_ = false;
}
inline bool Http::fully_decode_reserved_expansion() const {
  // @@protoc_insertion_point(field_get:google.api.Http.fully_decode_reserved_expansion)
  return _internal_fully_decode_reserved_expansion();
}
inline void Http::set_fully_decode_reserved_expansion(bool value) {
  _internal_set_fully_decode_reserved_expansion(value);
  // @@protoc_insertion_point(field_set:google.api.Http.fully_decode_reserved_expansion)
}
inline bool Http::_internal_fully_decode_reserved_expansion() const {
  return _impl_.fully_decode_reserved_expansion_;
}
inline void Http::_internal_set_fully_decode_reserved_expansion(bool value) {
  ;
  _impl_.fully_decode_reserved_expansion_ = value;
}

// -------------------------------------------------------------------

// HttpRule

// string selector = 1;
inline void HttpRule::clear_selector() {
  _impl_.selector_.ClearToEmpty();
}
inline const std::string& HttpRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.selector)
  return _internal_selector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_selector(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.selector_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.selector)
}
inline std::string* HttpRule::mutable_selector() {
  std::string* _s = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.selector)
  return _s;
}
inline const std::string& HttpRule::_internal_selector() const {
  return _impl_.selector_.Get();
}
inline void HttpRule::_internal_set_selector(const std::string& value) {
  ;


  _impl_.selector_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_selector() {
  ;
  return _impl_.selector_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.selector)
  return _impl_.selector_.Release();
}
inline void HttpRule::set_allocated_selector(std::string* value) {
  _impl_.selector_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.selector_.IsDefault()) {
          _impl_.selector_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.selector)
}

// string get = 2;
inline bool HttpRule::has_get() const {
  return pattern_case() == kGet;
}
inline void HttpRule::set_has_get() {
  _impl_._oneof_case_[0] = kGet;
}
inline void HttpRule::clear_get() {
  if (pattern_case() == kGet) {
    _impl_.pattern_.get_.Destroy();
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::get() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.get)
  return _internal_get();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_get(Arg_&& arg,
                                                     Args_... args) {
  if (pattern_case() != kGet) {
    clear_pattern();

    set_has_get();
    _impl_.pattern_.get_.InitDefault();
  }
  _impl_.pattern_.get_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.get)
}
inline std::string* HttpRule::mutable_get() {
  std::string* _s = _internal_mutable_get();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.get)
  return _s;
}
inline const std::string& HttpRule::_internal_get() const {
  if (pattern_case() != kGet) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pattern_.get_.Get();
}
inline void HttpRule::_internal_set_get(const std::string& value) {
  if (pattern_case() != kGet) {
    clear_pattern();

    set_has_get();
    _impl_.pattern_.get_.InitDefault();
  }


  _impl_.pattern_.get_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_get() {
  if (pattern_case() != kGet) {
    clear_pattern();

    set_has_get();
    _impl_.pattern_.get_.InitDefault();
  }
  return _impl_.pattern_.get_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_get() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.get)
  if (pattern_case() != kGet) {
    return nullptr;
  }
  clear_has_pattern();
  return _impl_.pattern_.get_.Release();
}
inline void HttpRule::set_allocated_get(std::string* value) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (value != nullptr) {
    set_has_get();
    _impl_.pattern_.get_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.get)
}

// string put = 3;
inline bool HttpRule::has_put() const {
  return pattern_case() == kPut;
}
inline void HttpRule::set_has_put() {
  _impl_._oneof_case_[0] = kPut;
}
inline void HttpRule::clear_put() {
  if (pattern_case() == kPut) {
    _impl_.pattern_.put_.Destroy();
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::put() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.put)
  return _internal_put();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_put(Arg_&& arg,
                                                     Args_... args) {
  if (pattern_case() != kPut) {
    clear_pattern();

    set_has_put();
    _impl_.pattern_.put_.InitDefault();
  }
  _impl_.pattern_.put_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.put)
}
inline std::string* HttpRule::mutable_put() {
  std::string* _s = _internal_mutable_put();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.put)
  return _s;
}
inline const std::string& HttpRule::_internal_put() const {
  if (pattern_case() != kPut) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pattern_.put_.Get();
}
inline void HttpRule::_internal_set_put(const std::string& value) {
  if (pattern_case() != kPut) {
    clear_pattern();

    set_has_put();
    _impl_.pattern_.put_.InitDefault();
  }


  _impl_.pattern_.put_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_put() {
  if (pattern_case() != kPut) {
    clear_pattern();

    set_has_put();
    _impl_.pattern_.put_.InitDefault();
  }
  return _impl_.pattern_.put_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_put() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.put)
  if (pattern_case() != kPut) {
    return nullptr;
  }
  clear_has_pattern();
  return _impl_.pattern_.put_.Release();
}
inline void HttpRule::set_allocated_put(std::string* value) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (value != nullptr) {
    set_has_put();
    _impl_.pattern_.put_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.put)
}

// string post = 4;
inline bool HttpRule::has_post() const {
  return pattern_case() == kPost;
}
inline void HttpRule::set_has_post() {
  _impl_._oneof_case_[0] = kPost;
}
inline void HttpRule::clear_post() {
  if (pattern_case() == kPost) {
    _impl_.pattern_.post_.Destroy();
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::post() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.post)
  return _internal_post();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_post(Arg_&& arg,
                                                     Args_... args) {
  if (pattern_case() != kPost) {
    clear_pattern();

    set_has_post();
    _impl_.pattern_.post_.InitDefault();
  }
  _impl_.pattern_.post_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.post)
}
inline std::string* HttpRule::mutable_post() {
  std::string* _s = _internal_mutable_post();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.post)
  return _s;
}
inline const std::string& HttpRule::_internal_post() const {
  if (pattern_case() != kPost) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pattern_.post_.Get();
}
inline void HttpRule::_internal_set_post(const std::string& value) {
  if (pattern_case() != kPost) {
    clear_pattern();

    set_has_post();
    _impl_.pattern_.post_.InitDefault();
  }


  _impl_.pattern_.post_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_post() {
  if (pattern_case() != kPost) {
    clear_pattern();

    set_has_post();
    _impl_.pattern_.post_.InitDefault();
  }
  return _impl_.pattern_.post_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_post() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.post)
  if (pattern_case() != kPost) {
    return nullptr;
  }
  clear_has_pattern();
  return _impl_.pattern_.post_.Release();
}
inline void HttpRule::set_allocated_post(std::string* value) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (value != nullptr) {
    set_has_post();
    _impl_.pattern_.post_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.post)
}

// string delete = 5;
inline bool HttpRule::has_delete_() const {
  return pattern_case() == kDelete;
}
inline void HttpRule::set_has_delete_() {
  _impl_._oneof_case_[0] = kDelete;
}
inline void HttpRule::clear_delete_() {
  if (pattern_case() == kDelete) {
    _impl_.pattern_.delete__.Destroy();
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::delete_() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.delete)
  return _internal_delete_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_delete_(Arg_&& arg,
                                                     Args_... args) {
  if (pattern_case() != kDelete) {
    clear_pattern();

    set_has_delete_();
    _impl_.pattern_.delete__.InitDefault();
  }
  _impl_.pattern_.delete__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.delete)
}
inline std::string* HttpRule::mutable_delete_() {
  std::string* _s = _internal_mutable_delete_();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.delete)
  return _s;
}
inline const std::string& HttpRule::_internal_delete_() const {
  if (pattern_case() != kDelete) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pattern_.delete__.Get();
}
inline void HttpRule::_internal_set_delete_(const std::string& value) {
  if (pattern_case() != kDelete) {
    clear_pattern();

    set_has_delete_();
    _impl_.pattern_.delete__.InitDefault();
  }


  _impl_.pattern_.delete__.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_delete_() {
  if (pattern_case() != kDelete) {
    clear_pattern();

    set_has_delete_();
    _impl_.pattern_.delete__.InitDefault();
  }
  return _impl_.pattern_.delete__.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_delete_() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.delete)
  if (pattern_case() != kDelete) {
    return nullptr;
  }
  clear_has_pattern();
  return _impl_.pattern_.delete__.Release();
}
inline void HttpRule::set_allocated_delete_(std::string* value) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (value != nullptr) {
    set_has_delete_();
    _impl_.pattern_.delete__.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.delete)
}

// string patch = 6;
inline bool HttpRule::has_patch() const {
  return pattern_case() == kPatch;
}
inline void HttpRule::set_has_patch() {
  _impl_._oneof_case_[0] = kPatch;
}
inline void HttpRule::clear_patch() {
  if (pattern_case() == kPatch) {
    _impl_.pattern_.patch_.Destroy();
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::patch() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.patch)
  return _internal_patch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_patch(Arg_&& arg,
                                                     Args_... args) {
  if (pattern_case() != kPatch) {
    clear_pattern();

    set_has_patch();
    _impl_.pattern_.patch_.InitDefault();
  }
  _impl_.pattern_.patch_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.patch)
}
inline std::string* HttpRule::mutable_patch() {
  std::string* _s = _internal_mutable_patch();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.patch)
  return _s;
}
inline const std::string& HttpRule::_internal_patch() const {
  if (pattern_case() != kPatch) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pattern_.patch_.Get();
}
inline void HttpRule::_internal_set_patch(const std::string& value) {
  if (pattern_case() != kPatch) {
    clear_pattern();

    set_has_patch();
    _impl_.pattern_.patch_.InitDefault();
  }


  _impl_.pattern_.patch_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_patch() {
  if (pattern_case() != kPatch) {
    clear_pattern();

    set_has_patch();
    _impl_.pattern_.patch_.InitDefault();
  }
  return _impl_.pattern_.patch_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_patch() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.patch)
  if (pattern_case() != kPatch) {
    return nullptr;
  }
  clear_has_pattern();
  return _impl_.pattern_.patch_.Release();
}
inline void HttpRule::set_allocated_patch(std::string* value) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (value != nullptr) {
    set_has_patch();
    _impl_.pattern_.patch_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.patch)
}

// .google.api.CustomHttpPattern custom = 8;
inline bool HttpRule::has_custom() const {
  return pattern_case() == kCustom;
}
inline bool HttpRule::_internal_has_custom() const {
  return pattern_case() == kCustom;
}
inline void HttpRule::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void HttpRule::clear_custom() {
  if (pattern_case() == kCustom) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.pattern_.custom_;
    }
    clear_has_pattern();
  }
}
inline ::google::api::CustomHttpPattern* HttpRule::release_custom() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.custom)
  if (pattern_case() == kCustom) {
    clear_has_pattern();
    ::google::api::CustomHttpPattern* temp = _impl_.pattern_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pattern_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::CustomHttpPattern& HttpRule::_internal_custom() const {
  return pattern_case() == kCustom
      ? *_impl_.pattern_.custom_
      : reinterpret_cast<::google::api::CustomHttpPattern&>(::google::api::_CustomHttpPattern_default_instance_);
}
inline const ::google::api::CustomHttpPattern& HttpRule::custom() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.custom)
  return _internal_custom();
}
inline ::google::api::CustomHttpPattern* HttpRule::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.custom)
  if (pattern_case() == kCustom) {
    clear_has_pattern();
    ::google::api::CustomHttpPattern* temp = _impl_.pattern_.custom_;
    _impl_.pattern_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_custom(::google::api::CustomHttpPattern* custom) {
  clear_pattern();
  if (custom) {
    set_has_custom();
    _impl_.pattern_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.custom)
}
inline ::google::api::CustomHttpPattern* HttpRule::_internal_mutable_custom() {
  if (pattern_case() != kCustom) {
    clear_pattern();
    set_has_custom();
    _impl_.pattern_.custom_ = CreateMaybeMessage< ::google::api::CustomHttpPattern >(GetArenaForAllocation());
  }
  return _impl_.pattern_.custom_;
}
inline ::google::api::CustomHttpPattern* HttpRule::mutable_custom() {
  ::google::api::CustomHttpPattern* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.custom)
  return _msg;
}

// string body = 7;
inline void HttpRule::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& HttpRule::body() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.body)
}
inline std::string* HttpRule::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.body)
  return _s;
}
inline const std::string& HttpRule::_internal_body() const {
  return _impl_.body_.Get();
}
inline void HttpRule::_internal_set_body(const std::string& value) {
  ;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_body() {
  ;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_body() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.body)
  return _impl_.body_.Release();
}
inline void HttpRule::set_allocated_body(std::string* value) {
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.body)
}

// string response_body = 12;
inline void HttpRule::clear_response_body() {
  _impl_.response_body_.ClearToEmpty();
}
inline const std::string& HttpRule::response_body() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.response_body)
  return _internal_response_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpRule::set_response_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.response_body_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.response_body)
}
inline std::string* HttpRule::mutable_response_body() {
  std::string* _s = _internal_mutable_response_body();
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.response_body)
  return _s;
}
inline const std::string& HttpRule::_internal_response_body() const {
  return _impl_.response_body_.Get();
}
inline void HttpRule::_internal_set_response_body(const std::string& value) {
  ;


  _impl_.response_body_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpRule::_internal_mutable_response_body() {
  ;
  return _impl_.response_body_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpRule::release_response_body() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.response_body)
  return _impl_.response_body_.Release();
}
inline void HttpRule::set_allocated_response_body(std::string* value) {
  _impl_.response_body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.response_body_.IsDefault()) {
          _impl_.response_body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.response_body)
}

// repeated .google.api.HttpRule additional_bindings = 11;
inline int HttpRule::_internal_additional_bindings_size() const {
  return _impl_.additional_bindings_.size();
}
inline int HttpRule::additional_bindings_size() const {
  return _internal_additional_bindings_size();
}
inline void HttpRule::clear_additional_bindings() {
  _internal_mutable_additional_bindings()->Clear();
}
inline ::google::api::HttpRule* HttpRule::mutable_additional_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.additional_bindings)
  return _internal_mutable_additional_bindings()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
HttpRule::mutable_additional_bindings() {
  // @@protoc_insertion_point(field_mutable_list:google.api.HttpRule.additional_bindings)
  return _internal_mutable_additional_bindings();
}
inline const ::google::api::HttpRule& HttpRule::_internal_additional_bindings(int index) const {
  return _internal_additional_bindings().Get(index);
}
inline const ::google::api::HttpRule& HttpRule::additional_bindings(int index) const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.additional_bindings)
  return _internal_additional_bindings(index);
}
inline ::google::api::HttpRule* HttpRule::_internal_add_additional_bindings() {
  return _internal_mutable_additional_bindings()->Add();
}
inline ::google::api::HttpRule* HttpRule::add_additional_bindings() {
  ::google::api::HttpRule* _add = _internal_add_additional_bindings();
  // @@protoc_insertion_point(field_add:google.api.HttpRule.additional_bindings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
HttpRule::additional_bindings() const {
  // @@protoc_insertion_point(field_list:google.api.HttpRule.additional_bindings)
  return _internal_additional_bindings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>&
HttpRule::_internal_additional_bindings() const {
  return _impl_.additional_bindings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::google::api::HttpRule>*
HttpRule::_internal_mutable_additional_bindings() {
  return &_impl_.additional_bindings_;
}

inline bool HttpRule::has_pattern() const {
  return pattern_case() != PATTERN_NOT_SET;
}
inline void HttpRule::clear_has_pattern() {
  _impl_._oneof_case_[0] = PATTERN_NOT_SET;
}
inline HttpRule::PatternCase HttpRule::pattern_case() const {
  return HttpRule::PatternCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomHttpPattern

// string kind = 1;
inline void CustomHttpPattern::clear_kind() {
  _impl_.kind_.ClearToEmpty();
}
inline const std::string& CustomHttpPattern::kind() const {
  // @@protoc_insertion_point(field_get:google.api.CustomHttpPattern.kind)
  return _internal_kind();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomHttpPattern::set_kind(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.kind_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.CustomHttpPattern.kind)
}
inline std::string* CustomHttpPattern::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:google.api.CustomHttpPattern.kind)
  return _s;
}
inline const std::string& CustomHttpPattern::_internal_kind() const {
  return _impl_.kind_.Get();
}
inline void CustomHttpPattern::_internal_set_kind(const std::string& value) {
  ;


  _impl_.kind_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomHttpPattern::_internal_mutable_kind() {
  ;
  return _impl_.kind_.Mutable( GetArenaForAllocation());
}
inline std::string* CustomHttpPattern::release_kind() {
  // @@protoc_insertion_point(field_release:google.api.CustomHttpPattern.kind)
  return _impl_.kind_.Release();
}
inline void CustomHttpPattern::set_allocated_kind(std::string* value) {
  _impl_.kind_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.kind_.IsDefault()) {
          _impl_.kind_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.CustomHttpPattern.kind)
}

// string path = 2;
inline void CustomHttpPattern::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& CustomHttpPattern::path() const {
  // @@protoc_insertion_point(field_get:google.api.CustomHttpPattern.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomHttpPattern::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.CustomHttpPattern.path)
}
inline std::string* CustomHttpPattern::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:google.api.CustomHttpPattern.path)
  return _s;
}
inline const std::string& CustomHttpPattern::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CustomHttpPattern::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomHttpPattern::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CustomHttpPattern::release_path() {
  // @@protoc_insertion_point(field_release:google.api.CustomHttpPattern.path)
  return _impl_.path_.Release();
}
inline void CustomHttpPattern::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.CustomHttpPattern.path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto_2epb_2eh
