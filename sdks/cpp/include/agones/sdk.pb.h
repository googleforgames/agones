// Copyright 2022 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2eproto AGONES_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct AGONES_EXPORT TableStruct_sdk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern AGONES_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2eproto;
namespace agones {
namespace dev {
namespace sdk {
class Duration;
class DurationDefaultTypeInternal;
AGONES_EXPORT extern DurationDefaultTypeInternal _Duration_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
AGONES_EXPORT extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameServer;
class GameServerDefaultTypeInternal;
AGONES_EXPORT extern GameServerDefaultTypeInternal _GameServer_default_instance_;
class GameServer_ObjectMeta;
class GameServer_ObjectMetaDefaultTypeInternal;
AGONES_EXPORT extern GameServer_ObjectMetaDefaultTypeInternal _GameServer_ObjectMeta_default_instance_;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal;
AGONES_EXPORT extern GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMeta_LabelsEntry_DoNotUse;
class GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal;
AGONES_EXPORT extern GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
class GameServer_Spec;
class GameServer_SpecDefaultTypeInternal;
AGONES_EXPORT extern GameServer_SpecDefaultTypeInternal _GameServer_Spec_default_instance_;
class GameServer_Spec_Health;
class GameServer_Spec_HealthDefaultTypeInternal;
AGONES_EXPORT extern GameServer_Spec_HealthDefaultTypeInternal _GameServer_Spec_Health_default_instance_;
class GameServer_Status;
class GameServer_StatusDefaultTypeInternal;
AGONES_EXPORT extern GameServer_StatusDefaultTypeInternal _GameServer_Status_default_instance_;
class GameServer_Status_PlayerStatus;
class GameServer_Status_PlayerStatusDefaultTypeInternal;
AGONES_EXPORT extern GameServer_Status_PlayerStatusDefaultTypeInternal _GameServer_Status_PlayerStatus_default_instance_;
class GameServer_Status_Port;
class GameServer_Status_PortDefaultTypeInternal;
AGONES_EXPORT extern GameServer_Status_PortDefaultTypeInternal _GameServer_Status_Port_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
AGONES_EXPORT extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace sdk
}  // namespace dev
}  // namespace agones
PROTOBUF_NAMESPACE_OPEN
template<> AGONES_EXPORT ::agones::dev::sdk::Duration* Arena::CreateMaybeMessage<::agones::dev::sdk::Duration>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::Empty* Arena::CreateMaybeMessage<::agones::dev::sdk::Empty>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_ObjectMeta* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_ObjectMeta>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_Spec* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_Spec>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_Spec_Health* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_Spec_Health>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_Status* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_Status>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_Status_PlayerStatus* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_Status_PlayerStatus>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::GameServer_Status_Port* Arena::CreateMaybeMessage<::agones::dev::sdk::GameServer_Status_Port>(Arena*);
template<> AGONES_EXPORT ::agones::dev::sdk::KeyValue* Arena::CreateMaybeMessage<::agones::dev::sdk::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agones {
namespace dev {
namespace sdk {

// ===================================================================

class AGONES_EXPORT Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT Duration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.Duration) */ {
 public:
  inline Duration() : Duration(nullptr) {}
  virtual ~Duration();

  Duration(const Duration& from);
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Duration& default_instance();

  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(Duration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Duration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const final {
    return CreateMaybeMessage<Duration>(nullptr);
  }

  Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.Duration";
  }
  protected:
  explicit Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  explicit GameServer_ObjectMeta_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse*>(&_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agones.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class GameServer_ObjectMeta_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GameServer_ObjectMeta_LabelsEntry_DoNotUse();
  explicit GameServer_ObjectMeta_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_LabelsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_LabelsEntry_DoNotUse*>(&_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agones.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_ObjectMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.ObjectMeta) */ {
 public:
  inline GameServer_ObjectMeta() : GameServer_ObjectMeta(nullptr) {}
  virtual ~GameServer_ObjectMeta();

  GameServer_ObjectMeta(const GameServer_ObjectMeta& from);
  GameServer_ObjectMeta(GameServer_ObjectMeta&& from) noexcept
    : GameServer_ObjectMeta() {
    *this = ::std::move(from);
  }

  inline GameServer_ObjectMeta& operator=(const GameServer_ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_ObjectMeta& operator=(GameServer_ObjectMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_ObjectMeta& default_instance();

  static inline const GameServer_ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const GameServer_ObjectMeta*>(
               &_GameServer_ObjectMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameServer_ObjectMeta& a, GameServer_ObjectMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_ObjectMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_ObjectMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_ObjectMeta* New() const final {
    return CreateMaybeMessage<GameServer_ObjectMeta>(nullptr);
  }

  GameServer_ObjectMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_ObjectMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_ObjectMeta& from);
  void MergeFrom(const GameServer_ObjectMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_ObjectMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.ObjectMeta";
  }
  protected:
  explicit GameServer_ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 8,
    kLabelsFieldNumber = 9,
    kNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kUidFieldNumber = 3,
    kResourceVersionFieldNumber = 4,
    kGenerationFieldNumber = 5,
    kCreationTimestampFieldNumber = 6,
    kDeletionTimestampFieldNumber = 7,
  };
  // map<string, string> annotations = 8;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // map<string, string> labels = 9;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 2;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string uid = 3;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string resource_version = 4;
  void clear_resource_version();
  const std::string& resource_version() const;
  void set_resource_version(const std::string& value);
  void set_resource_version(std::string&& value);
  void set_resource_version(const char* value);
  void set_resource_version(const char* value, size_t size);
  std::string* mutable_resource_version();
  std::string* release_resource_version();
  void set_allocated_resource_version(std::string* resource_version);
  private:
  const std::string& _internal_resource_version() const;
  void _internal_set_resource_version(const std::string& value);
  std::string* _internal_mutable_resource_version();
  public:

  // int64 generation = 5;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int64 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_timestamp = 6;
  void clear_creation_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp() const;
  void set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletion_timestamp = 7;
  void clear_deletion_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 deletion_timestamp() const;
  void set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletion_timestamp() const;
  void _internal_set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.ObjectMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameServer_ObjectMeta_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameServer_ObjectMeta_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 generation_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletion_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_Spec_Health PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.Spec.Health) */ {
 public:
  inline GameServer_Spec_Health() : GameServer_Spec_Health(nullptr) {}
  virtual ~GameServer_Spec_Health();

  GameServer_Spec_Health(const GameServer_Spec_Health& from);
  GameServer_Spec_Health(GameServer_Spec_Health&& from) noexcept
    : GameServer_Spec_Health() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec_Health& operator=(const GameServer_Spec_Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Spec_Health& operator=(GameServer_Spec_Health&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Spec_Health& default_instance();

  static inline const GameServer_Spec_Health* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec_Health*>(
               &_GameServer_Spec_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameServer_Spec_Health& a, GameServer_Spec_Health& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Spec_Health* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Spec_Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec_Health* New() const final {
    return CreateMaybeMessage<GameServer_Spec_Health>(nullptr);
  }

  GameServer_Spec_Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Spec_Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Spec_Health& from);
  void MergeFrom(const GameServer_Spec_Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Spec_Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.Spec.Health";
  }
  protected:
  explicit GameServer_Spec_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledFieldNumber = 1,
    kPeriodSecondsFieldNumber = 2,
    kFailureThresholdFieldNumber = 3,
    kInitialDelaySecondsFieldNumber = 4,
  };
  // bool disabled = 1;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // int32 period_seconds = 2;
  void clear_period_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 period_seconds() const;
  void set_period_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_period_seconds() const;
  void _internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 failure_threshold = 3;
  void clear_failure_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 failure_threshold() const;
  void set_failure_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failure_threshold() const;
  void _internal_set_failure_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 initial_delay_seconds = 4;
  void clear_initial_delay_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 initial_delay_seconds() const;
  void set_initial_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_initial_delay_seconds() const;
  void _internal_set_initial_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.Spec.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool disabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 period_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 failure_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 initial_delay_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_Spec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.Spec) */ {
 public:
  inline GameServer_Spec() : GameServer_Spec(nullptr) {}
  virtual ~GameServer_Spec();

  GameServer_Spec(const GameServer_Spec& from);
  GameServer_Spec(GameServer_Spec&& from) noexcept
    : GameServer_Spec() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec& operator=(const GameServer_Spec& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Spec& operator=(GameServer_Spec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Spec& default_instance();

  static inline const GameServer_Spec* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec*>(
               &_GameServer_Spec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameServer_Spec& a, GameServer_Spec& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Spec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Spec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec* New() const final {
    return CreateMaybeMessage<GameServer_Spec>(nullptr);
  }

  GameServer_Spec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Spec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Spec& from);
  void MergeFrom(const GameServer_Spec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Spec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.Spec";
  }
  protected:
  explicit GameServer_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Spec_Health Health;

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
  };
  // .agones.dev.sdk.GameServer.Spec.Health health = 1;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  const ::agones::dev::sdk::GameServer_Spec_Health& health() const;
  ::agones::dev::sdk::GameServer_Spec_Health* release_health();
  ::agones::dev::sdk::GameServer_Spec_Health* mutable_health();
  void set_allocated_health(::agones::dev::sdk::GameServer_Spec_Health* health);
  private:
  const ::agones::dev::sdk::GameServer_Spec_Health& _internal_health() const;
  ::agones::dev::sdk::GameServer_Spec_Health* _internal_mutable_health();
  public:
  void unsafe_arena_set_allocated_health(
      ::agones::dev::sdk::GameServer_Spec_Health* health);
  ::agones::dev::sdk::GameServer_Spec_Health* unsafe_arena_release_health();

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.Spec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agones::dev::sdk::GameServer_Spec_Health* health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_Status_Port PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.Status.Port) */ {
 public:
  inline GameServer_Status_Port() : GameServer_Status_Port(nullptr) {}
  virtual ~GameServer_Status_Port();

  GameServer_Status_Port(const GameServer_Status_Port& from);
  GameServer_Status_Port(GameServer_Status_Port&& from) noexcept
    : GameServer_Status_Port() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_Port& operator=(const GameServer_Status_Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_Port& operator=(GameServer_Status_Port&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_Port& default_instance();

  static inline const GameServer_Status_Port* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_Port*>(
               &_GameServer_Status_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameServer_Status_Port& a, GameServer_Status_Port& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_Port* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_Port* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_Port* New() const final {
    return CreateMaybeMessage<GameServer_Status_Port>(nullptr);
  }

  GameServer_Status_Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_Port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_Port& from);
  void MergeFrom(const GameServer_Status_Port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_Port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.Status.Port";
  }
  protected:
  explicit GameServer_Status_Port(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.Status.Port)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_Status_PlayerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.Status.PlayerStatus) */ {
 public:
  inline GameServer_Status_PlayerStatus() : GameServer_Status_PlayerStatus(nullptr) {}
  virtual ~GameServer_Status_PlayerStatus();

  GameServer_Status_PlayerStatus(const GameServer_Status_PlayerStatus& from);
  GameServer_Status_PlayerStatus(GameServer_Status_PlayerStatus&& from) noexcept
    : GameServer_Status_PlayerStatus() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_PlayerStatus& operator=(const GameServer_Status_PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_PlayerStatus& operator=(GameServer_Status_PlayerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_PlayerStatus& default_instance();

  static inline const GameServer_Status_PlayerStatus* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_PlayerStatus*>(
               &_GameServer_Status_PlayerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameServer_Status_PlayerStatus& a, GameServer_Status_PlayerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_PlayerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_PlayerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_PlayerStatus* New() const final {
    return CreateMaybeMessage<GameServer_Status_PlayerStatus>(nullptr);
  }

  GameServer_Status_PlayerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_PlayerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_PlayerStatus& from);
  void MergeFrom(const GameServer_Status_PlayerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_PlayerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.Status.PlayerStatus";
  }
  protected:
  explicit GameServer_Status_PlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kCountFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // repeated string ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // int64 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.Status.PlayerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer.Status) */ {
 public:
  inline GameServer_Status() : GameServer_Status(nullptr) {}
  virtual ~GameServer_Status();

  GameServer_Status(const GameServer_Status& from);
  GameServer_Status(GameServer_Status&& from) noexcept
    : GameServer_Status() {
    *this = ::std::move(from);
  }

  inline GameServer_Status& operator=(const GameServer_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status& operator=(GameServer_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status& default_instance();

  static inline const GameServer_Status* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status*>(
               &_GameServer_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameServer_Status& a, GameServer_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status* New() const final {
    return CreateMaybeMessage<GameServer_Status>(nullptr);
  }

  GameServer_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status& from);
  void MergeFrom(const GameServer_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer.Status";
  }
  protected:
  explicit GameServer_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Status_Port Port;
  typedef GameServer_Status_PlayerStatus PlayerStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 3,
    kStateFieldNumber = 1,
    kAddressFieldNumber = 2,
    kPlayersFieldNumber = 4,
  };
  // repeated .agones.dev.sdk.GameServer.Status.Port ports = 3;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::agones::dev::sdk::GameServer_Status_Port* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agones::dev::sdk::GameServer_Status_Port >*
      mutable_ports();
  private:
  const ::agones::dev::sdk::GameServer_Status_Port& _internal_ports(int index) const;
  ::agones::dev::sdk::GameServer_Status_Port* _internal_add_ports();
  public:
  const ::agones::dev::sdk::GameServer_Status_Port& ports(int index) const;
  ::agones::dev::sdk::GameServer_Status_Port* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agones::dev::sdk::GameServer_Status_Port >&
      ports() const;

  // string state = 1;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .agones.dev.sdk.GameServer.Status.PlayerStatus players = 4;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  const ::agones::dev::sdk::GameServer_Status_PlayerStatus& players() const;
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* release_players();
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* mutable_players();
  void set_allocated_players(::agones::dev::sdk::GameServer_Status_PlayerStatus* players);
  private:
  const ::agones::dev::sdk::GameServer_Status_PlayerStatus& _internal_players() const;
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* _internal_mutable_players();
  public:
  void unsafe_arena_set_allocated_players(
      ::agones::dev::sdk::GameServer_Status_PlayerStatus* players);
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* unsafe_arena_release_players();

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agones::dev::sdk::GameServer_Status_Port > ports_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class AGONES_EXPORT GameServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agones.dev.sdk.GameServer) */ {
 public:
  inline GameServer() : GameServer(nullptr) {}
  virtual ~GameServer();

  GameServer(const GameServer& from);
  GameServer(GameServer&& from) noexcept
    : GameServer() {
    *this = ::std::move(from);
  }

  inline GameServer& operator=(const GameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer& operator=(GameServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer& default_instance();

  static inline const GameServer* internal_default_instance() {
    return reinterpret_cast<const GameServer*>(
               &_GameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameServer& a, GameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer* New() const final {
    return CreateMaybeMessage<GameServer>(nullptr);
  }

  GameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer& from);
  void MergeFrom(const GameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agones.dev.sdk.GameServer";
  }
  protected:
  explicit GameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_ObjectMeta ObjectMeta;
  typedef GameServer_Spec Spec;
  typedef GameServer_Status Status;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectMetaFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  bool has_object_meta() const;
  private:
  bool _internal_has_object_meta() const;
  public:
  void clear_object_meta();
  const ::agones::dev::sdk::GameServer_ObjectMeta& object_meta() const;
  ::agones::dev::sdk::GameServer_ObjectMeta* release_object_meta();
  ::agones::dev::sdk::GameServer_ObjectMeta* mutable_object_meta();
  void set_allocated_object_meta(::agones::dev::sdk::GameServer_ObjectMeta* object_meta);
  private:
  const ::agones::dev::sdk::GameServer_ObjectMeta& _internal_object_meta() const;
  ::agones::dev::sdk::GameServer_ObjectMeta* _internal_mutable_object_meta();
  public:
  void unsafe_arena_set_allocated_object_meta(
      ::agones::dev::sdk::GameServer_ObjectMeta* object_meta);
  ::agones::dev::sdk::GameServer_ObjectMeta* unsafe_arena_release_object_meta();

  // .agones.dev.sdk.GameServer.Spec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::agones::dev::sdk::GameServer_Spec& spec() const;
  ::agones::dev::sdk::GameServer_Spec* release_spec();
  ::agones::dev::sdk::GameServer_Spec* mutable_spec();
  void set_allocated_spec(::agones::dev::sdk::GameServer_Spec* spec);
  private:
  const ::agones::dev::sdk::GameServer_Spec& _internal_spec() const;
  ::agones::dev::sdk::GameServer_Spec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::agones::dev::sdk::GameServer_Spec* spec);
  ::agones::dev::sdk::GameServer_Spec* unsafe_arena_release_spec();

  // .agones.dev.sdk.GameServer.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::agones::dev::sdk::GameServer_Status& status() const;
  ::agones::dev::sdk::GameServer_Status* release_status();
  ::agones::dev::sdk::GameServer_Status* mutable_status();
  void set_allocated_status(::agones::dev::sdk::GameServer_Status* status);
  private:
  const ::agones::dev::sdk::GameServer_Status& _internal_status() const;
  ::agones::dev::sdk::GameServer_Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::agones::dev::sdk::GameServer_Status* status);
  ::agones::dev::sdk::GameServer_Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:agones.dev.sdk.GameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agones::dev::sdk::GameServer_ObjectMeta* object_meta_;
  ::agones::dev::sdk::GameServer_Spec* spec_;
  ::agones::dev::sdk::GameServer_Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.KeyValue.value)
}

// -------------------------------------------------------------------

// Duration

// int64 seconds = 1;
inline void Duration::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Duration::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Duration::seconds() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.Duration.seconds)
  return _internal_seconds();
}
inline void Duration::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Duration::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.Duration.seconds)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameServer_ObjectMeta

// string name = 1;
inline void GameServer_ObjectMeta::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameServer_ObjectMeta::name() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.name)
  return _internal_name();
}
inline void GameServer_ObjectMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline std::string* GameServer_ObjectMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.ObjectMeta.name)
  return _internal_mutable_name();
}
inline const std::string& GameServer_ObjectMeta::_internal_name() const {
  return name_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_ObjectMeta::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline void GameServer_ObjectMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline void GameServer_ObjectMeta::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.ObjectMeta.name)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_ObjectMeta::release_name() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.ObjectMeta.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.ObjectMeta.name)
}

// string namespace = 2;
inline void GameServer_ObjectMeta::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& GameServer_ObjectMeta::namespace_() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.namespace)
  return _internal_namespace_();
}
inline void GameServer_ObjectMeta::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline std::string* GameServer_ObjectMeta::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.ObjectMeta.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GameServer_ObjectMeta::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GameServer_ObjectMeta::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_ObjectMeta::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline void GameServer_ObjectMeta::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline void GameServer_ObjectMeta::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_ObjectMeta::release_namespace_() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.ObjectMeta.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.ObjectMeta.namespace)
}

// string uid = 3;
inline void GameServer_ObjectMeta::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& GameServer_ObjectMeta::uid() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.uid)
  return _internal_uid();
}
inline void GameServer_ObjectMeta::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline std::string* GameServer_ObjectMeta::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.ObjectMeta.uid)
  return _internal_mutable_uid();
}
inline const std::string& GameServer_ObjectMeta::_internal_uid() const {
  return uid_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_ObjectMeta::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline void GameServer_ObjectMeta::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline void GameServer_ObjectMeta::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.ObjectMeta.uid)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_ObjectMeta::release_uid() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.ObjectMeta.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.ObjectMeta.uid)
}

// string resource_version = 4;
inline void GameServer_ObjectMeta::clear_resource_version() {
  resource_version_.ClearToEmpty();
}
inline const std::string& GameServer_ObjectMeta::resource_version() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  return _internal_resource_version();
}
inline void GameServer_ObjectMeta::set_resource_version(const std::string& value) {
  _internal_set_resource_version(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline std::string* GameServer_ObjectMeta::mutable_resource_version() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  return _internal_mutable_resource_version();
}
inline const std::string& GameServer_ObjectMeta::_internal_resource_version() const {
  return resource_version_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_resource_version(const std::string& value) {
  
  resource_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_ObjectMeta::set_resource_version(std::string&& value) {
  
  resource_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline void GameServer_ObjectMeta::set_resource_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline void GameServer_ObjectMeta::set_resource_version(const char* value,
    size_t size) {
  
  resource_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_resource_version() {
  
  return resource_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_ObjectMeta::release_resource_version() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
  return resource_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_resource_version(std::string* resource_version) {
  if (resource_version != nullptr) {
    
  } else {
    
  }
  resource_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.ObjectMeta.resource_version)
}

// int64 generation = 5;
inline void GameServer_ObjectMeta::clear_generation() {
  generation_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::generation() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.generation)
  return _internal_generation();
}
inline void GameServer_ObjectMeta::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  generation_ = value;
}
inline void GameServer_ObjectMeta::set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.generation)
}

// int64 creation_timestamp = 6;
inline void GameServer_ObjectMeta::clear_creation_timestamp() {
  creation_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_creation_timestamp() const {
  return creation_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void GameServer_ObjectMeta::_internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_timestamp_ = value;
}
inline void GameServer_ObjectMeta::set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
}

// int64 deletion_timestamp = 7;
inline void GameServer_ObjectMeta::clear_deletion_timestamp() {
  deletion_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_deletion_timestamp() const {
  return deletion_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::deletion_timestamp() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
  return _internal_deletion_timestamp();
}
inline void GameServer_ObjectMeta::_internal_set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletion_timestamp_ = value;
}
inline void GameServer_ObjectMeta::set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletion_timestamp(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
}

// map<string, string> annotations = 8;
inline int GameServer_ObjectMeta::_internal_annotations_size() const {
  return annotations_.size();
}
inline int GameServer_ObjectMeta::annotations_size() const {
  return _internal_annotations_size();
}
inline void GameServer_ObjectMeta::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::annotations() const {
  // @@protoc_insertion_point(field_map:agones.dev.sdk.GameServer.ObjectMeta.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:agones.dev.sdk.GameServer.ObjectMeta.annotations)
  return _internal_mutable_annotations();
}

// map<string, string> labels = 9;
inline int GameServer_ObjectMeta::_internal_labels_size() const {
  return labels_.size();
}
inline int GameServer_ObjectMeta::labels_size() const {
  return _internal_labels_size();
}
inline void GameServer_ObjectMeta::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::labels() const {
  // @@protoc_insertion_point(field_map:agones.dev.sdk.GameServer.ObjectMeta.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:agones.dev.sdk.GameServer.ObjectMeta.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// GameServer_Spec_Health

// bool disabled = 1;
inline void GameServer_Spec_Health::clear_disabled() {
  disabled_ = false;
}
inline bool GameServer_Spec_Health::_internal_disabled() const {
  return disabled_;
}
inline bool GameServer_Spec_Health::disabled() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Spec.Health.disabled)
  return _internal_disabled();
}
inline void GameServer_Spec_Health::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void GameServer_Spec_Health::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Spec.Health.disabled)
}

// int32 period_seconds = 2;
inline void GameServer_Spec_Health::clear_period_seconds() {
  period_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::_internal_period_seconds() const {
  return period_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::period_seconds() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Spec.Health.period_seconds)
  return _internal_period_seconds();
}
inline void GameServer_Spec_Health::_internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  period_seconds_ = value;
}
inline void GameServer_Spec_Health::set_period_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_period_seconds(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Spec.Health.period_seconds)
}

// int32 failure_threshold = 3;
inline void GameServer_Spec_Health::clear_failure_threshold() {
  failure_threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::_internal_failure_threshold() const {
  return failure_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::failure_threshold() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Spec.Health.failure_threshold)
  return _internal_failure_threshold();
}
inline void GameServer_Spec_Health::_internal_set_failure_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failure_threshold_ = value;
}
inline void GameServer_Spec_Health::set_failure_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failure_threshold(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Spec.Health.failure_threshold)
}

// int32 initial_delay_seconds = 4;
inline void GameServer_Spec_Health::clear_initial_delay_seconds() {
  initial_delay_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::_internal_initial_delay_seconds() const {
  return initial_delay_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Spec_Health::initial_delay_seconds() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Spec.Health.initial_delay_seconds)
  return _internal_initial_delay_seconds();
}
inline void GameServer_Spec_Health::_internal_set_initial_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  initial_delay_seconds_ = value;
}
inline void GameServer_Spec_Health::set_initial_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_initial_delay_seconds(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Spec.Health.initial_delay_seconds)
}

// -------------------------------------------------------------------

// GameServer_Spec

// .agones.dev.sdk.GameServer.Spec.Health health = 1;
inline bool GameServer_Spec::_internal_has_health() const {
  return this != internal_default_instance() && health_ != nullptr;
}
inline bool GameServer_Spec::has_health() const {
  return _internal_has_health();
}
inline void GameServer_Spec::clear_health() {
  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
}
inline const ::agones::dev::sdk::GameServer_Spec_Health& GameServer_Spec::_internal_health() const {
  const ::agones::dev::sdk::GameServer_Spec_Health* p = health_;
  return p != nullptr ? *p : reinterpret_cast<const ::agones::dev::sdk::GameServer_Spec_Health&>(
      ::agones::dev::sdk::_GameServer_Spec_Health_default_instance_);
}
inline const ::agones::dev::sdk::GameServer_Spec_Health& GameServer_Spec::health() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Spec.health)
  return _internal_health();
}
inline void GameServer_Spec::unsafe_arena_set_allocated_health(
    ::agones::dev::sdk::GameServer_Spec_Health* health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_);
  }
  health_ = health;
  if (health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agones.dev.sdk.GameServer.Spec.health)
}
inline ::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::release_health() {
  
  ::agones::dev::sdk::GameServer_Spec_Health* temp = health_;
  health_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.Spec.health)
  
  ::agones::dev::sdk::GameServer_Spec_Health* temp = health_;
  health_ = nullptr;
  return temp;
}
inline ::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::_internal_mutable_health() {
  
  if (health_ == nullptr) {
    auto* p = CreateMaybeMessage<::agones::dev::sdk::GameServer_Spec_Health>(GetArena());
    health_ = p;
  }
  return health_;
}
inline ::agones::dev::sdk::GameServer_Spec_Health* GameServer_Spec::mutable_health() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Spec.health)
  return _internal_mutable_health();
}
inline void GameServer_Spec::set_allocated_health(::agones::dev::sdk::GameServer_Spec_Health* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete health_;
  }
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(health);
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    
  } else {
    
  }
  health_ = health;
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.Spec.health)
}

// -------------------------------------------------------------------

// GameServer_Status_Port

// string name = 1;
inline void GameServer_Status_Port::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameServer_Status_Port::name() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.Port.name)
  return _internal_name();
}
inline void GameServer_Status_Port::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.Port.name)
}
inline std::string* GameServer_Status_Port::mutable_name() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.Port.name)
  return _internal_mutable_name();
}
inline const std::string& GameServer_Status_Port::_internal_name() const {
  return name_.Get();
}
inline void GameServer_Status_Port::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_Status_Port::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.Status.Port.name)
}
inline void GameServer_Status_Port::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.Status.Port.name)
}
inline void GameServer_Status_Port::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.Status.Port.name)
}
inline std::string* GameServer_Status_Port::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_Status_Port::release_name() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.Status.Port.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_Port::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.Status.Port.name)
}

// int32 port = 2;
inline void GameServer_Status_Port::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_Port::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_Port::port() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.Port.port)
  return _internal_port();
}
inline void GameServer_Status_Port::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void GameServer_Status_Port::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.Port.port)
}

// -------------------------------------------------------------------

// GameServer_Status_PlayerStatus

// int64 count = 1;
inline void GameServer_Status_PlayerStatus::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_PlayerStatus::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_PlayerStatus::count() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.PlayerStatus.count)
  return _internal_count();
}
inline void GameServer_Status_PlayerStatus::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GameServer_Status_PlayerStatus::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.PlayerStatus.count)
}

// int64 capacity = 2;
inline void GameServer_Status_PlayerStatus::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_PlayerStatus::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_PlayerStatus::capacity() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.PlayerStatus.capacity)
  return _internal_capacity();
}
inline void GameServer_Status_PlayerStatus::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void GameServer_Status_PlayerStatus::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.PlayerStatus.capacity)
}

// repeated string ids = 3;
inline int GameServer_Status_PlayerStatus::_internal_ids_size() const {
  return ids_.size();
}
inline int GameServer_Status_PlayerStatus::ids_size() const {
  return _internal_ids_size();
}
inline void GameServer_Status_PlayerStatus::clear_ids() {
  ids_.Clear();
}
inline std::string* GameServer_Status_PlayerStatus::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  return _internal_add_ids();
}
inline const std::string& GameServer_Status_PlayerStatus::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GameServer_Status_PlayerStatus::ids(int index) const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  return _internal_ids(index);
}
inline std::string* GameServer_Status_PlayerStatus::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  return ids_.Mutable(index);
}
inline void GameServer_Status_PlayerStatus::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GameServer_Status_PlayerStatus::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GameServer_Status_PlayerStatus::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline void GameServer_Status_PlayerStatus::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline std::string* GameServer_Status_PlayerStatus::_internal_add_ids() {
  return ids_.Add();
}
inline void GameServer_Status_PlayerStatus::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline void GameServer_Status_PlayerStatus::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline void GameServer_Status_PlayerStatus::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline void GameServer_Status_PlayerStatus::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServer_Status_PlayerStatus::ids() const {
  // @@protoc_insertion_point(field_list:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameServer_Status_PlayerStatus::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:agones.dev.sdk.GameServer.Status.PlayerStatus.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GameServer_Status

// string state = 1;
inline void GameServer_Status::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GameServer_Status::state() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.state)
  return _internal_state();
}
inline void GameServer_Status::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.state)
}
inline std::string* GameServer_Status::mutable_state() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.state)
  return _internal_mutable_state();
}
inline const std::string& GameServer_Status::_internal_state() const {
  return state_.Get();
}
inline void GameServer_Status::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_Status::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.Status.state)
}
inline void GameServer_Status::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.Status.state)
}
inline void GameServer_Status::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.Status.state)
}
inline std::string* GameServer_Status::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_Status::release_state() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.Status.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.Status.state)
}

// string address = 2;
inline void GameServer_Status::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GameServer_Status::address() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.address)
  return _internal_address();
}
inline void GameServer_Status::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:agones.dev.sdk.GameServer.Status.address)
}
inline std::string* GameServer_Status::mutable_address() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.address)
  return _internal_mutable_address();
}
inline const std::string& GameServer_Status::_internal_address() const {
  return address_.Get();
}
inline void GameServer_Status::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameServer_Status::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agones.dev.sdk.GameServer.Status.address)
}
inline void GameServer_Status::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agones.dev.sdk.GameServer.Status.address)
}
inline void GameServer_Status::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agones.dev.sdk.GameServer.Status.address)
}
inline std::string* GameServer_Status::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameServer_Status::release_address() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.Status.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.Status.address)
}

// repeated .agones.dev.sdk.GameServer.Status.Port ports = 3;
inline int GameServer_Status::_internal_ports_size() const {
  return ports_.size();
}
inline int GameServer_Status::ports_size() const {
  return _internal_ports_size();
}
inline void GameServer_Status::clear_ports() {
  ports_.Clear();
}
inline ::agones::dev::sdk::GameServer_Status_Port* GameServer_Status::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agones::dev::sdk::GameServer_Status_Port >*
GameServer_Status::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:agones.dev.sdk.GameServer.Status.ports)
  return &ports_;
}
inline const ::agones::dev::sdk::GameServer_Status_Port& GameServer_Status::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::agones::dev::sdk::GameServer_Status_Port& GameServer_Status::ports(int index) const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.ports)
  return _internal_ports(index);
}
inline ::agones::dev::sdk::GameServer_Status_Port* GameServer_Status::_internal_add_ports() {
  return ports_.Add();
}
inline ::agones::dev::sdk::GameServer_Status_Port* GameServer_Status::add_ports() {
  // @@protoc_insertion_point(field_add:agones.dev.sdk.GameServer.Status.ports)
  return _internal_add_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agones::dev::sdk::GameServer_Status_Port >&
GameServer_Status::ports() const {
  // @@protoc_insertion_point(field_list:agones.dev.sdk.GameServer.Status.ports)
  return ports_;
}

// .agones.dev.sdk.GameServer.Status.PlayerStatus players = 4;
inline bool GameServer_Status::_internal_has_players() const {
  return this != internal_default_instance() && players_ != nullptr;
}
inline bool GameServer_Status::has_players() const {
  return _internal_has_players();
}
inline void GameServer_Status::clear_players() {
  if (GetArena() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
}
inline const ::agones::dev::sdk::GameServer_Status_PlayerStatus& GameServer_Status::_internal_players() const {
  const ::agones::dev::sdk::GameServer_Status_PlayerStatus* p = players_;
  return p != nullptr ? *p : reinterpret_cast<const ::agones::dev::sdk::GameServer_Status_PlayerStatus&>(
      ::agones::dev::sdk::_GameServer_Status_PlayerStatus_default_instance_);
}
inline const ::agones::dev::sdk::GameServer_Status_PlayerStatus& GameServer_Status::players() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.Status.players)
  return _internal_players();
}
inline void GameServer_Status::unsafe_arena_set_allocated_players(
    ::agones::dev::sdk::GameServer_Status_PlayerStatus* players) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players_);
  }
  players_ = players;
  if (players) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agones.dev.sdk.GameServer.Status.players)
}
inline ::agones::dev::sdk::GameServer_Status_PlayerStatus* GameServer_Status::release_players() {
  
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* temp = players_;
  players_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agones::dev::sdk::GameServer_Status_PlayerStatus* GameServer_Status::unsafe_arena_release_players() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.Status.players)
  
  ::agones::dev::sdk::GameServer_Status_PlayerStatus* temp = players_;
  players_ = nullptr;
  return temp;
}
inline ::agones::dev::sdk::GameServer_Status_PlayerStatus* GameServer_Status::_internal_mutable_players() {
  
  if (players_ == nullptr) {
    auto* p = CreateMaybeMessage<::agones::dev::sdk::GameServer_Status_PlayerStatus>(GetArena());
    players_ = p;
  }
  return players_;
}
inline ::agones::dev::sdk::GameServer_Status_PlayerStatus* GameServer_Status::mutable_players() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.Status.players)
  return _internal_mutable_players();
}
inline void GameServer_Status::set_allocated_players(::agones::dev::sdk::GameServer_Status_PlayerStatus* players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete players_;
  }
  if (players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(players);
    if (message_arena != submessage_arena) {
      players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  players_ = players;
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.Status.players)
}

// -------------------------------------------------------------------

// GameServer

// .agones.dev.sdk.GameServer.ObjectMeta object_meta = 1;
inline bool GameServer::_internal_has_object_meta() const {
  return this != internal_default_instance() && object_meta_ != nullptr;
}
inline bool GameServer::has_object_meta() const {
  return _internal_has_object_meta();
}
inline void GameServer::clear_object_meta() {
  if (GetArena() == nullptr && object_meta_ != nullptr) {
    delete object_meta_;
  }
  object_meta_ = nullptr;
}
inline const ::agones::dev::sdk::GameServer_ObjectMeta& GameServer::_internal_object_meta() const {
  const ::agones::dev::sdk::GameServer_ObjectMeta* p = object_meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::agones::dev::sdk::GameServer_ObjectMeta&>(
      ::agones::dev::sdk::_GameServer_ObjectMeta_default_instance_);
}
inline const ::agones::dev::sdk::GameServer_ObjectMeta& GameServer::object_meta() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.object_meta)
  return _internal_object_meta();
}
inline void GameServer::unsafe_arena_set_allocated_object_meta(
    ::agones::dev::sdk::GameServer_ObjectMeta* object_meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_meta_);
  }
  object_meta_ = object_meta;
  if (object_meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agones.dev.sdk.GameServer.object_meta)
}
inline ::agones::dev::sdk::GameServer_ObjectMeta* GameServer::release_object_meta() {
  
  ::agones::dev::sdk::GameServer_ObjectMeta* temp = object_meta_;
  object_meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agones::dev::sdk::GameServer_ObjectMeta* GameServer::unsafe_arena_release_object_meta() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.object_meta)
  
  ::agones::dev::sdk::GameServer_ObjectMeta* temp = object_meta_;
  object_meta_ = nullptr;
  return temp;
}
inline ::agones::dev::sdk::GameServer_ObjectMeta* GameServer::_internal_mutable_object_meta() {
  
  if (object_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::agones::dev::sdk::GameServer_ObjectMeta>(GetArena());
    object_meta_ = p;
  }
  return object_meta_;
}
inline ::agones::dev::sdk::GameServer_ObjectMeta* GameServer::mutable_object_meta() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.object_meta)
  return _internal_mutable_object_meta();
}
inline void GameServer::set_allocated_object_meta(::agones::dev::sdk::GameServer_ObjectMeta* object_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_meta_;
  }
  if (object_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_meta);
    if (message_arena != submessage_arena) {
      object_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_meta, submessage_arena);
    }
    
  } else {
    
  }
  object_meta_ = object_meta;
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.object_meta)
}

// .agones.dev.sdk.GameServer.Spec spec = 2;
inline bool GameServer::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool GameServer::has_spec() const {
  return _internal_has_spec();
}
inline void GameServer::clear_spec() {
  if (GetArena() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::agones::dev::sdk::GameServer_Spec& GameServer::_internal_spec() const {
  const ::agones::dev::sdk::GameServer_Spec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::agones::dev::sdk::GameServer_Spec&>(
      ::agones::dev::sdk::_GameServer_Spec_default_instance_);
}
inline const ::agones::dev::sdk::GameServer_Spec& GameServer::spec() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.spec)
  return _internal_spec();
}
inline void GameServer::unsafe_arena_set_allocated_spec(
    ::agones::dev::sdk::GameServer_Spec* spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agones.dev.sdk.GameServer.spec)
}
inline ::agones::dev::sdk::GameServer_Spec* GameServer::release_spec() {
  
  ::agones::dev::sdk::GameServer_Spec* temp = spec_;
  spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agones::dev::sdk::GameServer_Spec* GameServer::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.spec)
  
  ::agones::dev::sdk::GameServer_Spec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::agones::dev::sdk::GameServer_Spec* GameServer::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::agones::dev::sdk::GameServer_Spec>(GetArena());
    spec_ = p;
  }
  return spec_;
}
inline ::agones::dev::sdk::GameServer_Spec* GameServer::mutable_spec() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.spec)
  return _internal_mutable_spec();
}
inline void GameServer::set_allocated_spec(::agones::dev::sdk::GameServer_Spec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.spec)
}

// .agones.dev.sdk.GameServer.Status status = 3;
inline bool GameServer::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GameServer::has_status() const {
  return _internal_has_status();
}
inline void GameServer::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::agones::dev::sdk::GameServer_Status& GameServer::_internal_status() const {
  const ::agones::dev::sdk::GameServer_Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::agones::dev::sdk::GameServer_Status&>(
      ::agones::dev::sdk::_GameServer_Status_default_instance_);
}
inline const ::agones::dev::sdk::GameServer_Status& GameServer::status() const {
  // @@protoc_insertion_point(field_get:agones.dev.sdk.GameServer.status)
  return _internal_status();
}
inline void GameServer::unsafe_arena_set_allocated_status(
    ::agones::dev::sdk::GameServer_Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agones.dev.sdk.GameServer.status)
}
inline ::agones::dev::sdk::GameServer_Status* GameServer::release_status() {
  
  ::agones::dev::sdk::GameServer_Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agones::dev::sdk::GameServer_Status* GameServer::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:agones.dev.sdk.GameServer.status)
  
  ::agones::dev::sdk::GameServer_Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::agones::dev::sdk::GameServer_Status* GameServer::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::agones::dev::sdk::GameServer_Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::agones::dev::sdk::GameServer_Status* GameServer::mutable_status() {
  // @@protoc_insertion_point(field_mutable:agones.dev.sdk.GameServer.status)
  return _internal_mutable_status();
}
inline void GameServer::set_allocated_status(::agones::dev::sdk::GameServer_Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:agones.dev.sdk.GameServer.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace dev
}  // namespace agones

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
