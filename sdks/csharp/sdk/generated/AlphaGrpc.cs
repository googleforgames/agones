// Copyright 2022 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: alpha.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Agones.Dev.Sdk.Alpha {
  /// <summary>
  /// SDK service to be used in the GameServer SDK to the Pod Sidecar.
  /// </summary>
  public static partial class SDK
  {
    static readonly string __ServiceName = "agones.dev.sdk.alpha.SDK";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Alpha.PlayerID> __Marshaller_agones_dev_sdk_alpha_PlayerID = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Alpha.PlayerID.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Alpha.Bool> __Marshaller_agones_dev_sdk_alpha_Bool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Alpha.Bool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Alpha.Count> __Marshaller_agones_dev_sdk_alpha_Count = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Alpha.Count.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Alpha.Empty> __Marshaller_agones_dev_sdk_alpha_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Alpha.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Alpha.PlayerIDList> __Marshaller_agones_dev_sdk_alpha_PlayerIDList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Alpha.PlayerIDList.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool> __Method_PlayerConnect = new grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlayerConnect",
        __Marshaller_agones_dev_sdk_alpha_PlayerID,
        __Marshaller_agones_dev_sdk_alpha_Bool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool> __Method_PlayerDisconnect = new grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlayerDisconnect",
        __Marshaller_agones_dev_sdk_alpha_PlayerID,
        __Marshaller_agones_dev_sdk_alpha_Bool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.Count, global::Agones.Dev.Sdk.Alpha.Empty> __Method_SetPlayerCapacity = new grpc::Method<global::Agones.Dev.Sdk.Alpha.Count, global::Agones.Dev.Sdk.Alpha.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPlayerCapacity",
        __Marshaller_agones_dev_sdk_alpha_Count,
        __Marshaller_agones_dev_sdk_alpha_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count> __Method_GetPlayerCapacity = new grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayerCapacity",
        __Marshaller_agones_dev_sdk_alpha_Empty,
        __Marshaller_agones_dev_sdk_alpha_Count);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count> __Method_GetPlayerCount = new grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayerCount",
        __Marshaller_agones_dev_sdk_alpha_Empty,
        __Marshaller_agones_dev_sdk_alpha_Count);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool> __Method_IsPlayerConnected = new grpc::Method<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsPlayerConnected",
        __Marshaller_agones_dev_sdk_alpha_PlayerID,
        __Marshaller_agones_dev_sdk_alpha_Bool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.PlayerIDList> __Method_GetConnectedPlayers = new grpc::Method<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.PlayerIDList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectedPlayers",
        __Marshaller_agones_dev_sdk_alpha_Empty,
        __Marshaller_agones_dev_sdk_alpha_PlayerIDList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Agones.Dev.Sdk.Alpha.AlphaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SDK</summary>
    [grpc::BindServiceMethod(typeof(SDK), "BindService")]
    public abstract partial class SDKBase
    {
      /// <summary>
      /// PlayerConnect increases the SDKâ€™s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
      /// list of connected playerIDs.
      ///
      /// If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
      /// connected playerIDs will be left unchanged.
      ///
      /// An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
      /// the server has been reached. The playerID will not be added to the list of playerIDs.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Bool> PlayerConnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decreases the SDKâ€™s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
      /// playerID value exists within the list.
      ///
      /// If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
      /// will be left unchanged.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Bool> PlayerDisconnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the GameServer.Status.Players.Capacity value with a new capacity.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Empty> SetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Count request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the current player count. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCount(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.Bool> IsPlayerConnected(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Alpha.PlayerIDList> GetConnectedPlayers(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SDK</summary>
    public partial class SDKClient : grpc::ClientBase<SDKClient>
    {
      /// <summary>Creates a new client for SDK</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SDKClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SDK that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SDKClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SDKClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SDKClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// PlayerConnect increases the SDKâ€™s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
      /// list of connected playerIDs.
      ///
      /// If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
      /// connected playerIDs will be left unchanged.
      ///
      /// An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
      /// the server has been reached. The playerID will not be added to the list of playerIDs.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool PlayerConnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayerConnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PlayerConnect increases the SDKâ€™s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
      /// list of connected playerIDs.
      ///
      /// If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
      /// connected playerIDs will be left unchanged.
      ///
      /// An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
      /// the server has been reached. The playerID will not be added to the list of playerIDs.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool PlayerConnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlayerConnect, null, options, request);
      }
      /// <summary>
      /// PlayerConnect increases the SDKâ€™s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
      /// list of connected playerIDs.
      ///
      /// If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
      /// connected playerIDs will be left unchanged.
      ///
      /// An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
      /// the server has been reached. The playerID will not be added to the list of playerIDs.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> PlayerConnectAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayerConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PlayerConnect increases the SDKâ€™s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
      /// list of connected playerIDs.
      ///
      /// If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
      /// connected playerIDs will be left unchanged.
      ///
      /// An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
      /// the server has been reached. The playerID will not be added to the list of playerIDs.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> PlayerConnectAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlayerConnect, null, options, request);
      }
      /// <summary>
      /// Decreases the SDKâ€™s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
      /// playerID value exists within the list.
      ///
      /// If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
      /// will be left unchanged.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool PlayerDisconnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayerDisconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decreases the SDKâ€™s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
      /// playerID value exists within the list.
      ///
      /// If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
      /// will be left unchanged.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool PlayerDisconnect(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlayerDisconnect, null, options, request);
      }
      /// <summary>
      /// Decreases the SDKâ€™s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
      /// playerID value exists within the list.
      ///
      /// If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
      /// will be left unchanged.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> PlayerDisconnectAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayerDisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decreases the SDKâ€™s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
      ///
      /// GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
      /// unless there is already an update pending, in which case the update joins that batch operation.
      ///
      /// PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
      /// playerID value exists within the list.
      ///
      /// If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
      /// will be left unchanged.
      ///
      /// Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
      /// through the Kubernetes API, as indeterminate results will occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> PlayerDisconnectAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlayerDisconnect, null, options, request);
      }
      /// <summary>
      /// Update the GameServer.Status.Players.Capacity value with a new capacity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Empty SetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Count request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPlayerCapacity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the GameServer.Status.Players.Capacity value with a new capacity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Empty SetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Count request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPlayerCapacity, null, options, request);
      }
      /// <summary>
      /// Update the GameServer.Status.Players.Capacity value with a new capacity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Empty> SetPlayerCapacityAsync(global::Agones.Dev.Sdk.Alpha.Count request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPlayerCapacityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the GameServer.Status.Players.Capacity value with a new capacity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Empty> SetPlayerCapacityAsync(global::Agones.Dev.Sdk.Alpha.Count request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPlayerCapacity, null, options, request);
      }
      /// <summary>
      /// Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Count GetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerCapacity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Count GetPlayerCapacity(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayerCapacity, null, options, request);
      }
      /// <summary>
      /// Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCapacityAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerCapacityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCapacityAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayerCapacity, null, options, request);
      }
      /// <summary>
      /// Retrieves the current player count. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Count GetPlayerCount(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current player count. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Count GetPlayerCount(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayerCount, null, options, request);
      }
      /// <summary>
      /// Retrieves the current player count. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCountAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the current player count. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Count> GetPlayerCountAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayerCount, null, options, request);
      }
      /// <summary>
      /// Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool IsPlayerConnected(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPlayerConnected(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.Bool IsPlayerConnected(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsPlayerConnected, null, options, request);
      }
      /// <summary>
      /// Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> IsPlayerConnectedAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPlayerConnectedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.Bool> IsPlayerConnectedAsync(global::Agones.Dev.Sdk.Alpha.PlayerID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsPlayerConnected, null, options, request);
      }
      /// <summary>
      /// Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.PlayerIDList GetConnectedPlayers(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectedPlayers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Agones.Dev.Sdk.Alpha.PlayerIDList GetConnectedPlayers(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectedPlayers, null, options, request);
      }
      /// <summary>
      /// Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.PlayerIDList> GetConnectedPlayersAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectedPlayersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
      /// even if the value has yet to be updated on the GameServer status resource.
      ///
      /// If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Alpha.PlayerIDList> GetConnectedPlayersAsync(global::Agones.Dev.Sdk.Alpha.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectedPlayers, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SDKClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SDKClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SDKBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PlayerConnect, serviceImpl.PlayerConnect)
          .AddMethod(__Method_PlayerDisconnect, serviceImpl.PlayerDisconnect)
          .AddMethod(__Method_SetPlayerCapacity, serviceImpl.SetPlayerCapacity)
          .AddMethod(__Method_GetPlayerCapacity, serviceImpl.GetPlayerCapacity)
          .AddMethod(__Method_GetPlayerCount, serviceImpl.GetPlayerCount)
          .AddMethod(__Method_IsPlayerConnected, serviceImpl.IsPlayerConnected)
          .AddMethod(__Method_GetConnectedPlayers, serviceImpl.GetConnectedPlayers).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SDKBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PlayerConnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(serviceImpl.PlayerConnect));
      serviceBinder.AddMethod(__Method_PlayerDisconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(serviceImpl.PlayerDisconnect));
      serviceBinder.AddMethod(__Method_SetPlayerCapacity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.Count, global::Agones.Dev.Sdk.Alpha.Empty>(serviceImpl.SetPlayerCapacity));
      serviceBinder.AddMethod(__Method_GetPlayerCapacity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count>(serviceImpl.GetPlayerCapacity));
      serviceBinder.AddMethod(__Method_GetPlayerCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.Count>(serviceImpl.GetPlayerCount));
      serviceBinder.AddMethod(__Method_IsPlayerConnected, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.PlayerID, global::Agones.Dev.Sdk.Alpha.Bool>(serviceImpl.IsPlayerConnected));
      serviceBinder.AddMethod(__Method_GetConnectedPlayers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Alpha.Empty, global::Agones.Dev.Sdk.Alpha.PlayerIDList>(serviceImpl.GetConnectedPlayers));
    }

  }
}
#endregion
