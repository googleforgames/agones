// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sdk.proto
// </auto-generated>
// Original file comments:
// Copyright 2017 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Agones.Dev.Sdk {
  /// <summary>
  /// SDK service to be used in the GameServer SDK to the Pod Sidecar
  /// </summary>
  public static partial class SDK
  {
    static readonly string __ServiceName = "agones.dev.sdk.SDK";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Empty> __Marshaller_agones_dev_sdk_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Empty.Parser));
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.GameServer> __Marshaller_agones_dev_sdk_GameServer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.GameServer.Parser));
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.KeyValue> __Marshaller_agones_dev_sdk_KeyValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.KeyValue.Parser));
    static readonly grpc::Marshaller<global::Agones.Dev.Sdk.Duration> __Marshaller_agones_dev_sdk_Duration = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Agones.Dev.Sdk.Duration.Parser));

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> __Method_Ready = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ready",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> __Method_Allocate = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Allocate",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> __Method_Shutdown = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> __Method_Health = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Health",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer> __Method_GetGameServer = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameServer",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_GameServer);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer> __Method_WatchGameServer = new grpc::Method<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchGameServer",
        __Marshaller_agones_dev_sdk_Empty,
        __Marshaller_agones_dev_sdk_GameServer);

    static readonly grpc::Method<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty> __Method_SetLabel = new grpc::Method<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabel",
        __Marshaller_agones_dev_sdk_KeyValue,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty> __Method_SetAnnotation = new grpc::Method<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAnnotation",
        __Marshaller_agones_dev_sdk_KeyValue,
        __Marshaller_agones_dev_sdk_Empty);

    static readonly grpc::Method<global::Agones.Dev.Sdk.Duration, global::Agones.Dev.Sdk.Empty> __Method_Reserve = new grpc::Method<global::Agones.Dev.Sdk.Duration, global::Agones.Dev.Sdk.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reserve",
        __Marshaller_agones_dev_sdk_Duration,
        __Marshaller_agones_dev_sdk_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Agones.Dev.Sdk.SdkReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SDK</summary>
    [grpc::BindServiceMethod(typeof(SDK), "BindService")]
    public abstract partial class SDKBase
    {
      /// <summary>
      /// Call when the GameServer is ready
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> Ready(global::Agones.Dev.Sdk.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Call to self Allocation the GameServer
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> Allocate(global::Agones.Dev.Sdk.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Call when the GameServer is shutting down
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> Shutdown(global::Agones.Dev.Sdk.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send a Empty every d Duration to declare that this GameSever is healthy
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> Health(grpc::IAsyncStreamReader<global::Agones.Dev.Sdk.Empty> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve the current GameServer data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.GameServer> GetGameServer(global::Agones.Dev.Sdk.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send GameServer details whenever the GameServer is updated
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task WatchGameServer(global::Agones.Dev.Sdk.Empty request, grpc::IServerStreamWriter<global::Agones.Dev.Sdk.GameServer> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Apply a Label to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> SetLabel(global::Agones.Dev.Sdk.KeyValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Apply a Annotation to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> SetAnnotation(global::Agones.Dev.Sdk.KeyValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the GameServer as the Reserved state for Duration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Agones.Dev.Sdk.Empty> Reserve(global::Agones.Dev.Sdk.Duration request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SDK</summary>
    public partial class SDKClient : grpc::ClientBase<SDKClient>
    {
      /// <summary>Creates a new client for SDK</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SDKClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SDK that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SDKClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SDKClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SDKClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Call when the GameServer is ready
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Ready(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ready(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call when the GameServer is ready
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Ready(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ready, null, options, request);
      }
      /// <summary>
      /// Call when the GameServer is ready
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ReadyAsync(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call when the GameServer is ready
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ReadyAsync(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ready, null, options, request);
      }
      /// <summary>
      /// Call to self Allocation the GameServer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Allocate(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Allocate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call to self Allocation the GameServer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Allocate(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Allocate, null, options, request);
      }
      /// <summary>
      /// Call to self Allocation the GameServer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> AllocateAsync(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllocateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call to self Allocation the GameServer
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> AllocateAsync(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Allocate, null, options, request);
      }
      /// <summary>
      /// Call when the GameServer is shutting down
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Shutdown(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shutdown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call when the GameServer is shutting down
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Shutdown(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      /// <summary>
      /// Call when the GameServer is shutting down
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ShutdownAsync(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShutdownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call when the GameServer is shutting down
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ShutdownAsync(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      /// <summary>
      /// Send a Empty every d Duration to declare that this GameSever is healthy
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> Health(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Health(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send a Empty every d Duration to declare that this GameSever is healthy
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty> Health(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Health, null, options);
      }
      /// <summary>
      /// Retrieve the current GameServer data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.GameServer GetGameServer(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current GameServer data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.GameServer GetGameServer(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameServer, null, options, request);
      }
      /// <summary>
      /// Retrieve the current GameServer data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.GameServer> GetGameServerAsync(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve the current GameServer data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.GameServer> GetGameServerAsync(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameServer, null, options, request);
      }
      /// <summary>
      /// Send GameServer details whenever the GameServer is updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Agones.Dev.Sdk.GameServer> WatchGameServer(global::Agones.Dev.Sdk.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchGameServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send GameServer details whenever the GameServer is updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Agones.Dev.Sdk.GameServer> WatchGameServer(global::Agones.Dev.Sdk.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchGameServer, null, options, request);
      }
      /// <summary>
      /// Apply a Label to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty SetLabel(global::Agones.Dev.Sdk.KeyValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply a Label to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty SetLabel(global::Agones.Dev.Sdk.KeyValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabel, null, options, request);
      }
      /// <summary>
      /// Apply a Label to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> SetLabelAsync(global::Agones.Dev.Sdk.KeyValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLabelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply a Label to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> SetLabelAsync(global::Agones.Dev.Sdk.KeyValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabel, null, options, request);
      }
      /// <summary>
      /// Apply a Annotation to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty SetAnnotation(global::Agones.Dev.Sdk.KeyValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply a Annotation to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty SetAnnotation(global::Agones.Dev.Sdk.KeyValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAnnotation, null, options, request);
      }
      /// <summary>
      /// Apply a Annotation to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> SetAnnotationAsync(global::Agones.Dev.Sdk.KeyValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Apply a Annotation to the backing GameServer metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> SetAnnotationAsync(global::Agones.Dev.Sdk.KeyValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAnnotation, null, options, request);
      }
      /// <summary>
      /// Marks the GameServer as the Reserved state for Duration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Reserve(global::Agones.Dev.Sdk.Duration request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reserve(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the GameServer as the Reserved state for Duration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Agones.Dev.Sdk.Empty Reserve(global::Agones.Dev.Sdk.Duration request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reserve, null, options, request);
      }
      /// <summary>
      /// Marks the GameServer as the Reserved state for Duration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ReserveAsync(global::Agones.Dev.Sdk.Duration request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReserveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the GameServer as the Reserved state for Duration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Agones.Dev.Sdk.Empty> ReserveAsync(global::Agones.Dev.Sdk.Duration request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reserve, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SDKClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SDKClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SDKBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ready, serviceImpl.Ready)
          .AddMethod(__Method_Allocate, serviceImpl.Allocate)
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown)
          .AddMethod(__Method_Health, serviceImpl.Health)
          .AddMethod(__Method_GetGameServer, serviceImpl.GetGameServer)
          .AddMethod(__Method_WatchGameServer, serviceImpl.WatchGameServer)
          .AddMethod(__Method_SetLabel, serviceImpl.SetLabel)
          .AddMethod(__Method_SetAnnotation, serviceImpl.SetAnnotation)
          .AddMethod(__Method_Reserve, serviceImpl.Reserve).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SDKBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ready, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(serviceImpl.Ready));
      serviceBinder.AddMethod(__Method_Allocate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(serviceImpl.Allocate));
      serviceBinder.AddMethod(__Method_Shutdown, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(serviceImpl.Shutdown));
      serviceBinder.AddMethod(__Method_Health, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.Empty>(serviceImpl.Health));
      serviceBinder.AddMethod(__Method_GetGameServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer>(serviceImpl.GetGameServer));
      serviceBinder.AddMethod(__Method_WatchGameServer, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Agones.Dev.Sdk.Empty, global::Agones.Dev.Sdk.GameServer>(serviceImpl.WatchGameServer));
      serviceBinder.AddMethod(__Method_SetLabel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty>(serviceImpl.SetLabel));
      serviceBinder.AddMethod(__Method_SetAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.KeyValue, global::Agones.Dev.Sdk.Empty>(serviceImpl.SetAnnotation));
      serviceBinder.AddMethod(__Method_Reserve, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Agones.Dev.Sdk.Duration, global::Agones.Dev.Sdk.Empty>(serviceImpl.Reserve));
    }

  }
}
#endregion
