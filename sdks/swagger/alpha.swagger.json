{
  "swagger": "2.0",
  "info": {
    "title": "alpha.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SDK"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/alpha/player/capacity": {
      "get": {
        "summary": "Retrieves the current player capacity. This is always accurate from what has been set through this SDK,\neven if the value has yet to be updated on the GameServer status resource.",
        "description": "If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.",
        "operationId": "GetPlayerCapacity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaCount"
            }
          }
        },
        "tags": [
          "SDK"
        ]
      },
      "put": {
        "summary": "Update the GameServer.Status.Players.Capacity value with a new capacity.",
        "operationId": "SetPlayerCapacity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sdkalphaEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Store a count variable.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alphaCount"
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/alpha/player/connect": {
      "post": {
        "summary": "PlayerConnect increases the SDK’s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.",
        "description": "GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,\nunless there is already an update pending, in which case the update joins that batch operation.\n\nPlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the\nlist of connected playerIDs.\n\nIf the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of\nconnected playerIDs will be left unchanged.\n\nAn error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for\nthe server has been reached. The playerID will not be added to the list of playerIDs.\n\nWarning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count\nthrough the Kubernetes API, as indeterminate results will occur.",
        "operationId": "PlayerConnect",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaBool"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The unique identifier for a given player.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alphaPlayerID"
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/alpha/player/connected": {
      "get": {
        "summary": "Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,\neven if the value has yet to be updated on the GameServer status resource.",
        "description": "If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.",
        "operationId": "GetConnectedPlayers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaPlayerIDList"
            }
          }
        },
        "tags": [
          "SDK"
        ]
      }
    },
    "/alpha/player/connected/{playerID}": {
      "get": {
        "summary": "Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,\neven if the value has yet to be updated on the GameServer status resource.",
        "description": "If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.",
        "operationId": "IsPlayerConnected",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaBool"
            }
          }
        },
        "parameters": [
          {
            "name": "playerID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/alpha/player/count": {
      "get": {
        "summary": "Retrieves the current player count. This is always accurate from what has been set through this SDK,\neven if the value has yet to be updated on the GameServer status resource.",
        "description": "If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.",
        "operationId": "GetPlayerCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaCount"
            }
          }
        },
        "tags": [
          "SDK"
        ]
      }
    },
    "/alpha/player/disconnect": {
      "post": {
        "summary": "Decreases the SDK’s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.",
        "description": "GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,\nunless there is already an update pending, in which case the update joins that batch operation.\n\nPlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the\nplayerID value exists within the list.\n\nIf the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list\nwill be left unchanged.\n\nWarning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count\nthrough the Kubernetes API, as indeterminate results will occur.",
        "operationId": "PlayerDisconnect",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaBool"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The unique identifier for a given player.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alphaPlayerID"
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/counters/{counterUpdateRequest.name}": {
      "patch": {
        "summary": "UpdateCounter returns the updated Counter. Returns NOT_FOUND if the Counter does not exist (name cannot be updated).\nReturns OUT_OF_RANGE if the Count is out of range [0,Capacity].",
        "operationId": "UpdateCounter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaCounter"
            }
          }
        },
        "parameters": [
          {
            "name": "counterUpdateRequest.name",
            "description": "The name of the Counter to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "counterUpdateRequest",
            "description": "The requested update to make to the Counter",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "string",
                  "format": "int64",
                  "title": "The value to set the Counter Count"
                },
                "capacity": {
                  "type": "string",
                  "format": "int64",
                  "title": "The value to set the Counter Capacity"
                },
                "countDiff": {
                  "type": "string",
                  "format": "int64",
                  "title": "countDiff tracks if a Counter Update Request is CountIncrement (positive), CountDecrement\n(negative), 0 if a CountSet or CapacitySet request"
                }
              },
              "title": "The requested update to make to the Counter"
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/counters/{name}": {
      "get": {
        "summary": "Gets a Counter. Returns NOT_FOUND if the Counter does not exist.",
        "operationId": "GetCounter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaCounter"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the Counter to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/lists/{list.name}": {
      "patch": {
        "summary": "UpdateList returns the updated List. Returns NOT_FOUND if the List does not exist (name cannot be updated).\n**THIS WILL OVERWRITE ALL EXISTING LIST.VALUES WITH ANY REQUEST LIST.VALUES**\nUse AddListValue() or RemoveListValue() for modifying the List.Values field.\nReturns INVALID_ARGUMENT if the field mask path(s) are not field(s) of the List.\nIf a field mask path(s) is specified, but the value is not set in the request List object,\nthen the default value for the variable will be set (i.e. 0 for \"capacity\", empty list for \"values\").",
        "operationId": "UpdateList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaList"
            }
          }
        },
        "parameters": [
          {
            "name": "list.name",
            "description": "The name of the List",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "list",
            "description": "The List to update",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "capacity": {
                  "type": "string",
                  "format": "int64",
                  "title": "The maximum capacity of the List"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "The array of items in the List [\"v1\", \"v2\", …]"
                }
              },
              "title": "The List to update"
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/lists/{name}": {
      "get": {
        "summary": "Gets a List. Returns NOT_FOUND if the List does not exist.",
        "operationId": "GetList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaList"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the List to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/lists/{name}:addValue": {
      "post": {
        "summary": "Adds a value to a List and returns updated List. Returns NOT_FOUND if the List does not exist.\nReturns ALREADY_EXISTS if the value is already in the List.\nReturns OUT_OF_RANGE if the List is already at Capacity.",
        "operationId": "AddListValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaList"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the List to add a value to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    },
    "/v1alpha1/lists/{name}:removeValue": {
      "post": {
        "summary": "Removes a value from a List and returns updated List. Returns NOT_FOUND if the List does not exist.\nReturns NOT_FOUND if the value is not in the List.",
        "operationId": "RemoveListValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/alphaList"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the List to remove a value from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        ],
        "tags": [
          "SDK"
        ]
      }
    }
  },
  "definitions": {
    "alphaBool": {
      "type": "object",
      "properties": {
        "bool": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "title": "Store a boolean result"
    },
    "alphaCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Store a count variable."
    },
    "alphaCounter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the Counter"
        },
        "count": {
          "type": "string",
          "format": "int64",
          "title": "The current count of the Counter"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "The maximum capacity of the Counter"
        }
      },
      "description": "A representation of a Counter."
    },
    "alphaCounterUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the Counter to update"
        },
        "count": {
          "type": "string",
          "format": "int64",
          "title": "The value to set the Counter Count"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "The value to set the Counter Capacity"
        },
        "countDiff": {
          "type": "string",
          "format": "int64",
          "title": "countDiff tracks if a Counter Update Request is CountIncrement (positive), CountDecrement\n(negative), 0 if a CountSet or CapacitySet request"
        }
      },
      "description": "A representation of a Counter Update Request."
    },
    "alphaList": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the List"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "The maximum capacity of the List"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The array of items in the List [\"v1\", \"v2\", …]"
        }
      },
      "description": "A representation of a List."
    },
    "alphaPlayerID": {
      "type": "object",
      "properties": {
        "playerID": {
          "type": "string"
        }
      },
      "description": "The unique identifier for a given player."
    },
    "alphaPlayerIDList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "List of Player IDs"
    },
    "sdkalphaEmpty": {
      "type": "object",
      "title": "I am Empty"
    }
  }
}
